{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "QBhKB1emcBUl"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "pd.options.display.max_columns = None\n",
    "pd.options.display.max_rows = None\n",
    "plt.rcParams['figure.figsize'] = [15,8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 426
    },
    "id": "exFIc2oAdWsR",
    "outputId": "23658c9e-d5c2-4600-a0f7-987dfc0f1656"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Vehicle_Class</th>\n",
       "      <th>Engine_Size</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Fuel_Consumption_in_City(L/100 km)</th>\n",
       "      <th>Fuel_Consumption_in_City_Hwy(L/100 km)</th>\n",
       "      <th>Fuel_Consumption_comb(L/100km)</th>\n",
       "      <th>CO2_Emissions</th>\n",
       "      <th>Smog_Level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021</td>\n",
       "      <td>Acura</td>\n",
       "      <td>ILX</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2.4</td>\n",
       "      <td>4</td>\n",
       "      <td>AM8</td>\n",
       "      <td>9.9</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.6</td>\n",
       "      <td>199</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>Acura</td>\n",
       "      <td>NSX</td>\n",
       "      <td>Two-seater</td>\n",
       "      <td>3.5</td>\n",
       "      <td>6</td>\n",
       "      <td>AM9</td>\n",
       "      <td>11.1</td>\n",
       "      <td>10.8</td>\n",
       "      <td>11.0</td>\n",
       "      <td>256</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021</td>\n",
       "      <td>Acura</td>\n",
       "      <td>RDX SH-AWD</td>\n",
       "      <td>SUV: Small</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>AS10</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.6</td>\n",
       "      <td>9.9</td>\n",
       "      <td>232</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021</td>\n",
       "      <td>Acura</td>\n",
       "      <td>RDX SH-AWD A-SPEC</td>\n",
       "      <td>SUV: Small</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>AS10</td>\n",
       "      <td>11.3</td>\n",
       "      <td>9.1</td>\n",
       "      <td>10.3</td>\n",
       "      <td>242</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021</td>\n",
       "      <td>Acura</td>\n",
       "      <td>TLX SH-AWD</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>AS10</td>\n",
       "      <td>11.2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.8</td>\n",
       "      <td>230</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Model_Year   Make              Model Vehicle_Class  Engine_Size  Cylinders  \\\n",
       "0        2021  Acura                ILX       Compact          2.4          4   \n",
       "1        2021  Acura                NSX    Two-seater          3.5          6   \n",
       "2        2021  Acura         RDX SH-AWD    SUV: Small          2.0          4   \n",
       "3        2021  Acura  RDX SH-AWD A-SPEC    SUV: Small          2.0          4   \n",
       "4        2021  Acura         TLX SH-AWD       Compact          2.0          4   \n",
       "\n",
       "  Transmission  Fuel_Consumption_in_City(L/100 km)  \\\n",
       "0          AM8                                 9.9   \n",
       "1          AM9                                11.1   \n",
       "2         AS10                                11.0   \n",
       "3         AS10                                11.3   \n",
       "4         AS10                                11.2   \n",
       "\n",
       "   Fuel_Consumption_in_City_Hwy(L/100 km)  Fuel_Consumption_comb(L/100km)  \\\n",
       "0                                     7.0                             8.6   \n",
       "1                                    10.8                            11.0   \n",
       "2                                     8.6                             9.9   \n",
       "3                                     9.1                            10.3   \n",
       "4                                     8.0                             9.8   \n",
       "\n",
       "   CO2_Emissions  Smog_Level  \n",
       "0            199           3  \n",
       "1            256           3  \n",
       "2            232           6  \n",
       "3            242           6  \n",
       "4            230           7  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(r'D:\\Imarticus Learning\\CO2-Emission-Prediction-project\\CO2_emission.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wPHVRD6kd9Fk",
    "outputId": "72a2ebf6-aaba-4155-8ce3-8190094d7ff4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 935 entries, 0 to 934\n",
      "Data columns (total 12 columns):\n",
      " #   Column                                  Non-Null Count  Dtype  \n",
      "---  ------                                  --------------  -----  \n",
      " 0   Model_Year                              935 non-null    int64  \n",
      " 1   Make                                    935 non-null    object \n",
      " 2   Model                                   935 non-null    object \n",
      " 3   Vehicle_Class                           935 non-null    object \n",
      " 4   Engine_Size                             935 non-null    float64\n",
      " 5   Cylinders                               935 non-null    int64  \n",
      " 6   Transmission                            935 non-null    object \n",
      " 7   Fuel_Consumption_in_City(L/100 km)      935 non-null    float64\n",
      " 8   Fuel_Consumption_in_City_Hwy(L/100 km)  935 non-null    float64\n",
      " 9   Fuel_Consumption_comb(L/100km)          935 non-null    float64\n",
      " 10  CO2_Emissions                           935 non-null    int64  \n",
      " 11  Smog_Level                              935 non-null    int64  \n",
      "dtypes: float64(4), int64(4), object(4)\n",
      "memory usage: 87.8+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "id": "Oe9RTvrsd9JG",
    "outputId": "2f0a038c-39b4-4c0d-dfee-ad99679c6cbc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Year</th>\n",
       "      <th>Engine_Size</th>\n",
       "      <th>Cylinders</th>\n",
       "      <th>Fuel_Consumption_in_City(L/100 km)</th>\n",
       "      <th>Fuel_Consumption_in_City_Hwy(L/100 km)</th>\n",
       "      <th>Fuel_Consumption_comb(L/100km)</th>\n",
       "      <th>CO2_Emissions</th>\n",
       "      <th>Smog_Level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>935.0</td>\n",
       "      <td>935.000000</td>\n",
       "      <td>935.000000</td>\n",
       "      <td>935.000000</td>\n",
       "      <td>935.000000</td>\n",
       "      <td>935.000000</td>\n",
       "      <td>935.000000</td>\n",
       "      <td>935.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2021.0</td>\n",
       "      <td>3.214866</td>\n",
       "      <td>5.716578</td>\n",
       "      <td>12.498610</td>\n",
       "      <td>9.306203</td>\n",
       "      <td>11.060214</td>\n",
       "      <td>258.529412</td>\n",
       "      <td>4.726203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.388513</td>\n",
       "      <td>1.977359</td>\n",
       "      <td>3.487271</td>\n",
       "      <td>2.215819</td>\n",
       "      <td>2.867028</td>\n",
       "      <td>64.442768</td>\n",
       "      <td>1.712127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2021.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.900000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2021.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>10.100000</td>\n",
       "      <td>7.700000</td>\n",
       "      <td>9.100000</td>\n",
       "      <td>213.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2021.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>10.700000</td>\n",
       "      <td>255.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2021.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>14.800000</td>\n",
       "      <td>10.800000</td>\n",
       "      <td>13.100000</td>\n",
       "      <td>303.500000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2021.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>30.300000</td>\n",
       "      <td>20.900000</td>\n",
       "      <td>26.100000</td>\n",
       "      <td>608.000000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Model_Year  Engine_Size   Cylinders  \\\n",
       "count       935.0   935.000000  935.000000   \n",
       "mean       2021.0     3.214866    5.716578   \n",
       "std           0.0     1.388513    1.977359   \n",
       "min        2021.0     1.000000    3.000000   \n",
       "25%        2021.0     2.000000    4.000000   \n",
       "50%        2021.0     3.000000    6.000000   \n",
       "75%        2021.0     4.000000    8.000000   \n",
       "max        2021.0     8.000000   16.000000   \n",
       "\n",
       "       Fuel_Consumption_in_City(L/100 km)  \\\n",
       "count                          935.000000   \n",
       "mean                            12.498610   \n",
       "std                              3.487271   \n",
       "min                              4.000000   \n",
       "25%                             10.100000   \n",
       "50%                             12.000000   \n",
       "75%                             14.800000   \n",
       "max                             30.300000   \n",
       "\n",
       "       Fuel_Consumption_in_City_Hwy(L/100 km)  Fuel_Consumption_comb(L/100km)  \\\n",
       "count                              935.000000                      935.000000   \n",
       "mean                                 9.306203                       11.060214   \n",
       "std                                  2.215819                        2.867028   \n",
       "min                                  3.900000                        4.000000   \n",
       "25%                                  7.700000                        9.100000   \n",
       "50%                                  9.000000                       10.700000   \n",
       "75%                                 10.800000                       13.100000   \n",
       "max                                 20.900000                       26.100000   \n",
       "\n",
       "       CO2_Emissions  Smog_Level  \n",
       "count     935.000000  935.000000  \n",
       "mean      258.529412    4.726203  \n",
       "std        64.442768    1.712127  \n",
       "min        94.000000    1.000000  \n",
       "25%       213.000000    3.000000  \n",
       "50%       255.000000    5.000000  \n",
       "75%       303.500000    6.000000  \n",
       "max       608.000000    7.000000  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DnR6WpsId9WY",
    "outputId": "03cd1c77-88ce-4d44-a811-77bb10b8b41e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2021    935\n",
       "Name: Model_Year, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Model_Year.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "rLC9a9AsvlqC"
   },
   "outputs": [],
   "source": [
    "corr = data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 705
    },
    "id": "y6VAQilJwHMh",
    "outputId": "50e7b64b-0c8b-4069-a7f1-0409c01f4a16"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f498c18b520>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "mask = np.zeros_like(corr)\n",
    "mask[np.triu_indices_from(mask,k=1)]= True\n",
    "sns.heatmap(corr, cmap ='YlGnBu',annot=True,annot_kws={'size' : 13},vmax=1,vmin=0,mask =mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1ROGP3CEDAFx",
    "outputId": "6ac5c3d3-e56d-4959-d09d-868e154138fc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "float64\n",
      "float64\n",
      "float64\n",
      "   mean of city + Hwy  comb of city + Hwy  Difference\n",
      "0                8.45                 8.6       -0.15\n",
      "1               10.95                11.0       -0.05\n",
      "2                9.80                 9.9       -0.10\n",
      "3               10.20                10.3       -0.10\n",
      "4                9.60                 9.8       -0.20\n"
     ]
    }
   ],
   "source": [
    "fuel_consumption =pd.Series((data[\"Fuel_Consumption_in_City(L/100 km)\"]+ data[\"Fuel_Consumption_in_City_Hwy(L/100 km)\"])/2, name = \"mean of city + Hwy\")\n",
    "print(fuel_consumption.dtypes)\n",
    "difference = pd.Series(fuel_consumption - data[\"Fuel_Consumption_comb(L/100km)\"],name = \"Difference\")\n",
    "print(difference.dtypes)\n",
    "comb =pd.Series(data[\"Fuel_Consumption_comb(L/100km)\"],name = \"comb of city + Hwy\")\n",
    "print(comb.dtypes)\n",
    "fuel_comsumption_diff = pd.concat([fuel_consumption,comb,difference], axis=1)\n",
    "print(fuel_comsumption_diff.head(5))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cR4StPCZO3YL"
   },
   "source": [
    "Here **Fuel_Consumption_comb(L/100km)** is the **Mean** of **Fuel_Consumption_in_City(L/100 km)** and **Fuel_Consumption_in_Hwy(L/100 km)**. we drop Fuel_Consumption_in_City(L/100 km) and Fuel_Consumption_in_Hwy(L/100 km) columns from our data to avoid multicollinearity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "TpUw-Ixcd9Zz",
    "outputId": "8d893b2f-5a60-41b3-ea3d-1a24769ad82f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Make', 'Model', 'Vehicle_Class', 'Engine_Size', 'Cylinders',\n",
       "       'Transmission', 'Fuel_Consumption_comb(L/100km)', 'CO2_Emissions',\n",
       "       'Smog_Level'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.drop(['Model_Year','Fuel_Consumption_in_City(L/100 km)','Fuel_Consumption_in_City_Hwy(L/100 km)'],axis=1)\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "w-zbk2svoKVf",
    "outputId": "3b46ba9b-e32a-45de-d698-890be1f531a9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4     407\n",
       "6     265\n",
       "8     213\n",
       "12     21\n",
       "3      18\n",
       "10      8\n",
       "16      2\n",
       "5       1\n",
       "Name: Cylinders, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Cylinders.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 646
    },
    "id": "wYjWOIyX0MKg",
    "outputId": "a5bcecfe-1a23-4c58-9ede-825624f0cfff"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.boxplot(figsize = (6,6))\n",
    "plt.title('Distribution of all Numeric Variables', fontsize = 15)\n",
    "plt.xticks(rotation = 90, fontsize = 15)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 412
    },
    "id": "6JrOS5MBdUCx",
    "outputId": "120e4655-6a37-4403-d205-86647db9d377"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.CO2_Emissions.hist(color = 'maroon', figsize=(6,6))\n",
    "plt.title('Distribution of Target Variable with Outliers', fontsize = 15)\n",
    "plt.xlabel('CO2_Emissions', fontsize = 15)\n",
    "plt.ylabel('Frequency', fontsize = 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "o7KoTT40qZij",
    "outputId": "5ab3534b-f32a-4ec0-8bbc-31446f4843e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Engine_Size                        2.0\n",
      "Cylinders                          4.0\n",
      "Fuel_Consumption_comb(L/100km)     4.0\n",
      "CO2_Emissions                     90.5\n",
      "Smog_Level                         3.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "Q1 = data.quantile(0.25)\n",
    "Q3 = data.quantile(0.75)\n",
    "IQR = Q3-Q1\n",
    "print(IQR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 734
    },
    "id": "9CjT36FEqdUo",
    "outputId": "0c864cb0-dbe0-4e72-afc4-6489b05a1573"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-14-1be39f2061f3>:1: FutureWarning: Automatic reindexing on DataFrame vs Series comparisons is deprecated and will raise ValueError in a future version.  Do `left, right = left.align(right, axis=1, copy=False)` before e.g. `left == right`\n",
      "  data_1 = data[~((data < (Q1-1.5*IQR))| (data > (Q3+1.5*IQR))).any(axis =1)]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([1, 2, 3, 4, 5]), <a list of 5 Text major ticklabel objects>)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_1 = data[~((data < (Q1-1.5*IQR))| (data > (Q3+1.5*IQR))).any(axis =1)]\n",
    "data_1 = data_1.reset_index(drop=True)\n",
    "data_1.boxplot(figsize=(6,6))\n",
    "plt.title(\"After removal of outliers\")\n",
    "plt.xticks(fontsize=16,rotation= 90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8T-z0ecpqkUW",
    "outputId": "2c5d363a-4b6f-4b8a-9c33-b973d1dc90db"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(924, 9)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Py3EN_o2yg5s",
    "outputId": "7acdae55-6925-480e-a90c-283b0e61d972"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Make                              0\n",
       "Model                             0\n",
       "Vehicle_Class                     0\n",
       "Engine_Size                       0\n",
       "Cylinders                         0\n",
       "Transmission                      0\n",
       "Fuel_Consumption_comb(L/100km)    0\n",
       "CO2_Emissions                     0\n",
       "Smog_Level                        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values=data.isnull().sum().sort_values(ascending = False)\n",
    "missing_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "0sJapanWtyOC"
   },
   "outputs": [],
   "source": [
    "X = data.drop('CO2_Emissions',axis =1)\n",
    "y = data.CO2_Emissions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 620
    },
    "id": "TkS9SIMZ8yoo",
    "outputId": "ba6ac37e-1ff5-47f8-c55b-4a94c2486cd0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f49892c8e80>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f49891ed580>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f49892189a0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f49891c8dc0>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f49891831f0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f498912f640>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.hist(figsize=(13,8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 422
    },
    "id": "OLi5QllZCYpg",
    "outputId": "f5010990-542a-42af-ca05-b0489b4c22c4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Fuel_Consumption_comb(L/100km)')"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAcwAAAGECAYAAAC70BCHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dd7gtZXn38e+PEkGKqKCheuyKDfTYghoikahICSqK5TWKgq9RIdgAjaJJlERjedVgUBELgiSADbsB1KASmgoixgICUg4gTbAA9/vHzIZ1FmvvPeewz3n22ef7ua51rTX9nlkzc8/zTEtVIUmSZrZG6wAkSVoVmDAlSRrAhClJ0gAmTEmSBjBhSpI0gAlTkqQBVmjCTHJSkpcu57BbJbk+yZpzHdfINA5O8qkZup+TZPvlHHclud9yB7eaSvL8JF9rOP2Dknyk1fRnk2T7JBet5Gmen+QvV+Y0VwUrYx+1MiT5myTfmaWffZK8d2XFNMRcrZdJ7pnk3CR3mq3fWRNmH9SN/YpxaZIjkqx/R4OcZjq3znxV/aqq1q+qm+d6WkNV1UOq6qSVPd35nmyTLOpjvH7s85w7Ou6qOrKqdpyLOKeTZNckZyW5NskVSf4ryb376b+9qpbrIG8+6P+X3478J1evxGk/IMl/9Mv0miQ/TLL/qp5QpszHfdTKkORPgDcB7+ybp7b/tWYY5qtJdkzy0P73FUlud9N/krslOb5fZy9I8ryx7s/r2/82yWeT3G2u56+qLgNOBPaerd+hJcydq2p9YBtgW+DA5Q9PC8hG/Q5j6vOZ1gHNpj8Q+QTwGuAuwL2BDwILaaf3iJH/ZKOVMcEk9wW+D1wIPKyq7gI8G1gMbLAyYtAKsyvwk6q6eEjPSdaj+99PBv4IHAPsNU3vHwT+ANwTeD5waJKH9ON5CPDvwAv77jcA/7b8szGjI4F9Zu2rqmb8AOcDfznS/C/ACSPNjwNOAa4GfgBsP9LtJOCl/e/7Av8FXAlc0Qe4Ud/tk8AtwI3A9cDrgUVAAWv1/WwGfB64CvgZ8LKR6RxM96d8ArgOOAdYPNL9DcDFfbfzgB0GDnfrvPf9/ifwmb7fM+h2TNMttwJeDfyin993AmuMdH8JcC7wG+CrwL369t/qh/1tvyyeQ7fiPbPvvl3ffae+eQfgrNnG23d7EPD1fhmeB+wx0u0IupX3hH7+vg/cd5p5W+q/mdB9xnEBO/bTv4ZuAzh5ZD35G+A7Y8vx5cD/0q1jHwQyZH6nie1Zo8trQveDgU/1vz/Q/wdTn5uAg0fWx2OBJcAvgVfPMM6dgDOBa+kSysETluWLgF/168obR7qv2y/P3wA/Bl4HXDTLene/2dr34/zHkeZnAGf1y/gU4OHT7QOmme6nGNkvTNPPLnTb2NV0+4YHj03jtcAP+/XiM8A6fbeNgS/2w10FfJt+W5ppvoDtgYvo9ieXA5cAuwFPB37aj+ugsf9+4jbOCt5HzbDMtgSO69ezK4EP9O3XoCv1XdDP2yeAu4ytUy+mW99+Q7cNPbpfvldPjWdkm/tvuvX9GuAn9PvIvvvhwJuWYfvfBfj8WLv7ATXWbj26ZPmAkXafBA7pf78d+PRIt/v2/W8wvl4CD6bbDvcc6fa6fn5/C3yULul+uV/+3wDuOjLutegS8sz7jwF/2GhQWwA/At7XN2/e/4lP7//Ap/TNm/TdT+K2HeH9+u53AjahSwzvnW6jHP9T+v7/DViHrqS7BHjyyMr4uz6ONYF3AN/ruz2wX2k2GxnvfWcbbsK8H0x3tPQsYG26jfuXwNoz7LhOBO4GbEW3gU4ti13pNqgH93/Um4BTZti5vQ14f//7IODnwD+PdHvfbOOlWzkvpNuI1qKrKbgC2HpkR3Ml8Ji++5HA0dPM21L/zYTu046Lbud3LbB7323ffrnOlDC/CGzUL8clwFOHLMdpYrtP/5+/B/gLYP2x7gfTJ8yx9lPr3LZ06/rpwJuBP+nH+Qvgr6aZ5vbAw/rhHg5cBuw2tiw/TJccHwH8nj6ZAIfQJYi70e08z2aOE2Y/T5cDj6XbDl5Et+7fadK2Oc10LwVePEP3B9DtuJ5Ct/28vv/v/mRkGqfSJZ270R0Evbzv9g7gQ/1wawNPpD9ommW+tqc7yHlzP9zL+v/w03Sl3ofQJcB7D9nGx5cDc7SPmmGZrUlXCHkP3fa7DvCEvttL+uV3H2B9uqT6ybG4PtQPs2M/7c8C96Dbb18O/PnINncT8Hf9fD+HLnHere/+P8Czl2H7/xCwz1i7SQlzW+CGsXavBb7Q//4c8Iax7tcDjxr9P4BH0h1sPmNs3/09uiQ5Nb9n9NNch67w9paxcf8Q2GXG/2SmjiMTvp4uKxfwTW4rGb5h6k8a6f+rwIv63yfR7wgnjHc34Myx6UxcGel2FDfTH1mMbERHjKyM3xjptjVw48gfdXm/YNcei2Ha4cZj6vsdTaZr0B2xPnGGHddTR5pfAXyz//1lYK+xcd16dMPtdwI7AD/sf38FeCm3HRCcDOw+23jpNoJvj8X471MrDd2O5iMj3Z5OVw0zU8K8euzz4NnGBfwf4Lsj3UKXyGdKmE8YaT4GOGDIcpxhnX5cP54ldDuSI+gTJxMSJt0B3vnAc/vmxwK/GuvnQOBjs21Pfb/vBd4ztiy3GOl+6si0fjG2Hu3N7Anz2pH/5P9Ns04dwW2J5VDgH8bGcx637VDPZ/aE+cfROCd0/3vgmLH/6mL6Gql+Gi8Y6f4vwIf632+j23ku64HA9nQJcc2+eYO+/8eO9H86tx28HMwM2/j4cmCO9lEzLLPH062jt0tMdPvhV4w0P7D/D9YaiWvzke5XAs8ZaT4W2G9km/s1S9fcnAq8sP/9v2Pr4K3zPU3cvwK2HGs3KWE+Ebh0rN3LgJNG5vHlY93H15m30tUibD/W3/nA88fm99CR5lcBnx0b5r+B/zPTfzL0HOZuVbUB3Qr4ILpSAnQ74mcnuXrqAzwB2HR8BP2VSEcnuTjJtXRVOBuP9zeNzYCrquq6kXYX0B05TLl05PcNwDpJ1qqqnwH70a2wl/cxbDbbcNPEceHUj6q6he6P2myafpfqv493qt97Ae8bWWZX0SWOzZnsu8ADktyT7sj1E8CWSTamK8V9a8B47wU8duy/ej7wpyPTGV8Ws13ctXFVbTTyOXfAuDZj6eVYdMtxJtONa1mX49Q0v1dVe1TVJnQb7ZOAN07qN8nadNV0n66qo0emu9nYsjyI7mh20jgem+TEJEuSXENXPTa+7g9aXnTr0WweOfKfvHpA//cCXjM2P1sy87o97kombPcjNmMk9n77uZCZt+GpZfBOutLU15L8IskByxJX3XZRzo3992Uj3W9k6fV8WbfxKcu9j5phnFsCF1TVTdNMb3RduIAuWY6ug+PzOdN8X9xvi6Pjm5rv3zDwPHSShwHXVNWFs/bcFcQ2HGu3IV3hbEh36LalU2ryxZnLMv/QzeOMF8kt020lVXUy3RHcu/pWF9KVMEd3mutV1SETBn873VHJw6pqQ+AFdDu3W0c/w6R/DdwtyeifthXd0caQuD9dVU+g2zEU8M9Dhptgy6kfSdagq6L+9ZD+6eKd6vdCuiqL0eW2blWdMk38N9AdCe8LnF1Vf6A7z7Q/8POqumLAeC8ETh7rtn5V/d9lXgp3zCV0yw2AJBltXkbLtBwnqar/oavOeug0vbyfrsT2prHp/nJsuhtU1dOnGcen6c5tbVndxTAfYul1fyaXcPv1aHncANx5pHn0QOlC4J/G5ufOVXXUMoz/G8AzZ+j+a7rtD7j1f9+SAdtwVV1XVa+pqvvQnR/bP8kOfeeZ5mt5zLSNr7B91DQuBLaaJqkutTz7ad3E0klhWWze/yej45ua7x/SVakP8XTgSwP7/SmwVpL7j7R7BN35XfrvR0x1SHIfulN6Px3p/+V0y+g9A6c5Ub+M70dXBT6t5bkP873AU5I8gq6UuHOSv0qyZpJ10t0nNmkHuAHdEcM1STanOyE76jK6+vjb6Y9WTgHe0U/j4XRXXU17D+WUJA9M8uR099j8ju7I4pZhs3o7j0qye79w96M71/S9Gfp/XZK7JtmSLtlNXUX6IeDAkavB7pLk2SPDTVoWJwOv7L+hq+4ebZ5tvF+kK6W+MMna/efRSR48eO7nxgnAw5Ls1i/Hv2X5d3KzLcfbSfKEJC9Lco+++UF0O+Hb/Y9J9gH+nK5qZ3SdORW4Lskbkqzbr/sPTfLoaSa7AV3p43dJHgM8b5r+Jjmmn8e79tvVq5Zh2FFnAc/rY30q3XxN+TDw8r4knCTrJdlpbOc/m7cAf5bknUn+FLorkpN8KslG/XzslGSHvtT+GrrtZ9aDmyTP6McVunNrN3PbNjzTfC2PmbbxFbKPmsGpdAdMh/T/yTpJtuu7HQX8XZJ7p7vN7+3AZ6YpjQ5xD+DV/X7h2XTXBUwlvi8xebneqY9p6rMGXcI8YaqHfn1ah+5cP31/dwKoqt/SHay+rZ+/7eiuS/hkP/iRdPnliemuvH0bcNxYKf464KnAk5JMKqgN9Rjg/KqasQZnmRNmVS2hqxJ8c7+S7EpXHbWE7ojoddOM9610J2evoVugx411fwfwpr5K6LUTht+Tru7818DxdOfevjEg5DvRXThxBV2VyD1Y/ttiPkd3LvA3dJc6715Vf5yl/9PpNuoT6K7UoqqOpyvlHp2uevps4Gkjwx0MfLxfFnv07U6m2/F+a5rmGcfbr2Q7As+lW4aX9v3OerPuDK7O0vdh7j/bAH1p+Nl056iupDuXcxrdjmmZDFiOE2OmS5A/SnI93Tnh4/t4xu1Jt4P89cg8HtRX8T2Drnr8l3Tr1kfoblOZ5BV0O4Xr6C5AOWYZZvOtdNVjvwS+xm07k2W1L7Az3fw/n+4CEACq6jS6c0cfoFu3f0Z3Xmuwqvo53Tm3RcA56aqej6X7b6+rqvPoapXeT7e8dqa7Xe0PA0Z/f7oS7PV0pyf+rapOnG2+ltNM2/iK2kdN1K9nO9OVfH5FVz08da/z4XTrwrfo1o3fsfwHU9BdyX5/uv/mn4BnVdWVfbcvAA/K0qeyoPs/bhz57E63PY8eBN2r7zZVaryR7vz4lFfQXex2Od1BwP+tqnMA+u+X0yXOy+n2d68YD7yqrqa7mOxpSf5hWWe893y6A/AZTV1pplkkOZju4oIXtI5lIemPSi+iK8WdOFv/0oriNj69JHvTXVG/3wz97EGXaPeYrp/5qK9tOhnYtqp+N1O/M51wllaIJH9Fd0R7I12NRJi5altSQ1V12IDerqa7BWaVUlWX01VBz8qHr6uFx9PdSzpVNbdbVd048yDD9ec8xh/bd31fBavllOTL0yzXg1rHtqrKbc+jnfRZ3gu8mqiqr1XVd1vHsSJZJStJ0gCWMCVJGsCEKUnSAKv1RT8bb7xxLVq0qHUYkrRKOf3006/on5S1WlmtE+aiRYs47bTTWochSauUJEMe0bjgWCUrSdIAJkxJkgYwYUqSNIAJU5KkAUyYkiQNYMKUJGkAE6YkSQOYMCVJGsCEKUnSACZMSZIGMGFKkjSACVOSpAFMmJIkDbBav61EklYFiw44Yc7Hef4hO835OBc6S5iSJA1gwpQkaQATpiRJA5gwJUkawIQpSdIAJkxJkgYwYUqSNIAJU5KkAUyYkiQNsMolzCRbJjkxyY+TnJNk3779wUkuTnJW/3l661glSQvHqvhovJuA11TVGUk2AE5P8vW+23uq6l0NY5MkLVCrXMKsqkuAS/rf1yU5F9i8bVSSpIVulauSHZVkEbAt8P2+1SuT/DDJ4UnuOs0weyc5LclpS5YsWUmRSpJWdatswkyyPnAssF9VXQscCtwX2IauBPqvk4arqsOqanFVLd5kk01WWrySpFXbKpkwk6xNlyyPrKrjAKrqsqq6uapuAT4MPKZljJKkhWWVS5hJAnwUOLeq3j3SftOR3v4aOHtlxyZJWrhWuYt+gO2AFwI/SnJW3+4gYM8k2wAFnA/s0yY8SdJCtMolzKr6DpAJnb60smORJK0+VrkqWUmSWjBhSpI0gAlTkqQBTJiSJA1gwpQkaQATpiRJA5gwJUkawIQpSdIAJkxJkgYwYUqSNIAJU5KkAUyYkiQNYMKUJGkAE6YkSQOYMCVJGsCEKUnSACZMSZIGMGFKkjSACVOSpAFMmJIkDWDClCRpABOmJEkDmDAlSRrAhClJ0gAmTEmSBlirdQCStCwWHXDCnI/z/EN2mvNxauGxhClJ0gAmTEmSBjBhSpI0gAlTkqQBTJiSJA1gwpQkaQATpiRJA5gwJUkawIQpSdIAJkxJkgYwYUqSNIAJU5KkAUyYkiQNYMKUJGkAE6YkSQOYMCVJGsCEKUnSACZMSZIGMGFKkjTAWq0mnOTxwAuAJwKbAjcCZwMnAJ+qqmtaxSZJ0rgmJcwkXwZeCnwVeCpdwtwaeBOwDvC5JLu0iE2SpElalTBfWFVXjLW7Hjij//xrko1XfliSJE3WJGGOJ8skG47GUlVXTUiokiQ10+wcJkCSfYC3Ar8Dqm9dwH2aBSVJ0gRNEybwWuChy1KaTLIl8AngnnTJ9bCqel+SuwGfARYB5wN7VNVv5jxiSdJqqfVtJT8HbljGYW4CXlNVWwOPA/42ydbAAcA3q+r+wDf7ZkmS5kTrEuaBwClJvg/8fqplVb16ugGq6hLgkv73dUnOBTYHdgW273v7OHAS8IYVErUkabXTOmH+O/BfwI+AW5Z14CSLgG2B7wP37JMpwKV0VbaSJM2J1glz7araf3kGTLI+cCywX1Vdm+TWblVVSWqa4fYG9gbYaqutlmfSkqTVUOuE+eU+gX2Bpatkr5ppoCRr0yXLI6vquL71ZUk2rapLkmwKXD5p2Ko6DDgMYPHixROTqlZdiw44YU7Hd/4hO83p+CStulonzD377wNH2s14W0m6ouRHgXOr6t0jnT4PvAg4pP/+3NyGKmlFmOuDHGlFaZ0w71tVS527TLLOLMNsB7wQ+FGSs/p2B9ElymOS7AVcAOwx18FKklZfrRPmR4CXTDUkWY+upLjDdANU1XeATNN52uEkSbojWt+HeXGSfwNIclfg68Cn2oYkSdLtNS1hVtXfJ/mXJB8CHgUcUlXHtoxJWui8MEpaPk0SZpLdRxq/D/w9cCpQSXYfufJVkqR5oVUJc+ex5jOBtfv2BZgwJUnzSqvXe724xXQlSVperapk1wL2Anajew4swMV0905+tKr+2CIuSZKm06pK9pPA1XTvwryob7cF3QMHPgU8p1FckiRN1CphPqqqHjDW7iLge0l+2iIgSZJm0uo+zKuSPDvJrdNPskaS5wC+9FmSNO+0SpjPBZ5F98D0nyb5X+AyYPe+myRJ80qrq2TPpz9PmeTufbsrW8QiSdIQzZ70k+RBwK70V8kmuRj4XFX9pFVMkiRNp0mVbJI3AEfTPUT91P4T4OgkB7SISZKkmbQqYe4FPGT8fssk7wbOoXtVlyRJ80ari35uATab0H7TvpskSfNKqxLmfsA3+6tjL+zbbQXcD3hlo5ikVdJcv31E0mStrpL9SpIHAI9h6Ufj/U9V3dwiJkmSZtLsKtmqugX43nj7JOtX1fUNQpIkaVqtzmHO5MetA5AkaVyrt5XsP10nYP2VGYskSUO0KmG+HbgrsMHYZ/2GMUmSNK1W5zDPAD5bVaePd0jy0gbxSJI0o1YJ88XAdM+OXbwyA5EkaYhW1Z+7A1tO6lBVl63kWCRJmlWrEuYvgH2TPAL4AfBl4GtV5bswJUnzUqsHF3wG+AxAkm2BpwLHJVkT+Abwlao6tUVskiRN0uzBBVOq6kzgTOAdSTYEXg28lO4NJpK0wo0/XvD8Q3ZqFInms+YJc1RVXZtk76raqnUskiSNmlcJs5fWAUhT5vrB5pZcpFXXfHxIQLUOQJKkca0ejfcFJifGAHdfyeFIkjSrVlWy71rObpIkNdHqtpKTW0xX0tzzBdZaXTQ5h5nkC0l2TrL2hG73SfK2JC9pEZskSZO0qpJ9GbA/8N4kVwFLgHWBRcDPgA9U1ecaxSZpNed9mZqkVZXspcDrgdcnWQRsCtwI/LSqbmgRkyRJM5kP92H+DtiE7qrZSwETpiRp3ml6H2b/7stT6d5e8izge567lCTNR61LmK8Dtq2qKwGS3B04BTi8aVSSJI1p/aSfK4HrRpqvY/oXS0uS1EyrJ/3s3//8GfD9JJ+jO4e5K/DDFjFJkjSTVlWyG/TfP+8/U7yVRJI0L7W6reStLaYrSdLyanrRT5LFwBuBe43GUlUPbxaUJEkTtL5K9ki6K2V/BNzSOBZJkqbVOmEuqarPN45BkqRZtU6Yb0nyEeCbwO+nWlbVce1CklacO/pmD59pKrXTOmG+GHgQsDa3VckWYMKUJM0rrRPmo6vqgY1jkCRpVq2f9HNKkq0bxyBJ0qxalzAfB5yV5Jd05zADlLeVaDp39BygJC2v1gnzqcs6QJLDgWcAl1fVQ/t2B9O9lHpJ39tBVfWluQpSkqSmVbJVdQGwEbBz/9mobzeTI5icaN9TVdv0H5OlJGlOtX4f5r50Dy+4R//5VJJXzTRMVX0LuGolhCdJ0q1aX/SzF/DYqnpzVb2Z7pzmy5ZzXK9M8sMkhye563Q9Jdk7yWlJTluyZMl0vUmStJTWCTPAzSPNN/ftltWhwH2BbYBLgH+drseqOqyqFlfV4k022WQ5JiVJWh21vujnY3Tvwzy+b94N+OiyjqSqLpv6neTDwBfnJjxJkjpNE2ZVvTvJScAT+lYvrqozl3U8STatqkv6xr8Gzp6jECVJAtq/3utxwDlVdUbfvGGSx1bV92cY5ihge2DjJBcBbwG2T7IN3WP1zgf2WdGxS5JWL62rZA8FHjnSfP2Edkupqj0ntF7maly150MIJK1KWifMVFVNNVTVLUlaxyTNWx5kSO20vkr2F0lenWTt/rMv8IvGMUmSdDutE+bLgT8DLgYuAh4L7N00IkmSJmh9lezlwHOn657kwKp6x0oMSZKkiVqXMGfz7NYBSJIE7S/6mc3yPPVHy2muLyg5/5Cd5nR8ktTSfC9h1uy9SJK04lnC1ArjLRCSFpL5XsL8j9YBSJIE7R+Ntwnd67wWjcZSVS/pv9/eJjJJkpbWukr2c8C3gW+w9Gu+JEmaV1onzDtX1RsaxyBJ0qxan8P8YpKnN45BkqRZtU6Y+9Ilzd8lua7/XNs4JkmSbqf1o/E2aDl9SZKGan0OkyS7AE/qG0+qqi+2jEeSpEmaVskmOYSuWvbH/WffJD5sXZI077QuYT4d2KaqbgFI8nHgTODAplFJkjSm9UU/ABuN/L5LsygkSZpB6xLmO4Azk5xI99zYJwEHtA1JkqTba32V7FFJTgIe3bd6Q1Vd2jAkSZImalIlm+RB/fcjgU2Bi/rPZn07SZLmlVYlzP2BvYF/ndCtgCev3HAkSZpZk4RZVXv3P59WVb8b7ZZknQYhLUi+j1KS5k7rq2RPGdhOkqSmmpQwk/wpsDmwbpJt6a6QBdgQuHOLmCRJmkmrc5h/BfwNsAXw7pH21wEHtQhIkqSZtDqH+XHg40meWVXHtohBkqRl0foc5klJ/l+SM5KcnuR9Se7eOCZJkm6ndcI8GlgCPBN4Vv/7M00jkiRpgtaPxtu0qv5hpPkfkzynWTSSJE2jdQnza0mem2SN/rMH8NXGMUmSdDutE+bLgE8Df+g/RwP7JLkuybVNI5MkaUTrh69v0HL6kiQN1focJkkeDixiJJaqOq5ZQJIkTdA0YSY5HHg4cA5wS9+6ABOmJGleaV3CfFxVbd04BkmSZtX6op/vJjFhSpLmvdYlzE/QJc1Lgd/TPYS9qurhbcOSJGlprRPmR4EXAj/itnOYkiTNO60T5pKq+nzjGCRJmlXrhHlmkk8DX6CrkgW8rUSSNP+0Tpjr0iXKHUfaeVuJJGneaf2knxe3nL4kSUO1fnDBx+hKlEupqpc0CEeSpGm1rpL94sjvdYC/Bn7dKBZJkqbVukr22NHmJEcB32kUjiRJ02r9pJ9x9wfu0ToISZLGtT6HeR1Ln8O8FHhDo3AkSZpW6ypZ34cpSVolNK2STbJdkvX63y9I8u4k95plmMOTXJ7k7JF2d0vy9ST/23/fdUXHLklavbQ+h3kocEOSRwCvAX5O90D2mRwBPHWs3QHAN6vq/sA3+2ZJkuZM64R5U1UVsCvwgar6IDBjNW1VfQu4aqz1rsDH+98fB3ab60AlSau31vdhXpfkQOAFwJOSrAGsvRzjuWdVXdL/vhS451wFKEkStC9hPofuWbJ7VdWlwBbAO+/ICPsS6+2eHjQlyd5JTkty2pIlS+7IpCRJq5HWV8leCrx7pPlXzH4Oc5LLkmxaVZck2RS4fIZpHgYcBrB48eJpE+tcW3TACXM+zvMP2WnOxylJmqz1VbK791e2XpPk2iTXJbl2OUb1eeBF/e8XAZ+buyglSWp/DvNfgJ2r6tyhA/SPz9se2DjJRcBbgEOAY5LsBVwA7LECYpUkrcZaJ8zLliVZAlTVntN02mEO4pEkaaLWCfO0JJ8BPkt38Q8AVeULpCVJ80rrhLkhcAOw40i7AkyYkqR5pfVVsi9uOX1JkoZqfZXsFkmO758Ne3mSY5Ns0TImSZImaf3ggo/R3RKyWf/5Qt9OkqR5pXXC3KSqPlZVN/WfI4BNGsckSdLttL7o58okLwCO6pv3BK5sGM8qZfzpQT75R5JWnNYJ8yXA+4H30F0dewrghUDLaUU8fk+S1Gl9lewFwC4tY5AkaYgm5zCTvDPJPhPa75PkkBYxSZI0k1YX/TyZ/o0hYz4MPGMlxyJJ0qxaJcw79e+tXEpV3QKkQTySJM2oVcK8Mcn9x1v27W5sEI8kSTNqddHPm4EvJ/lH4PS+3WLgQGC/RjFJkjStJgmzqr6cZDfgdcCr+tZnA8+sqh+1iGlZeQuHJK1emt1WUlVnAy+aqZ8k76+qV83UjyRJK0PrR+PNZrvWAUiSBPM/YUqSNC+YMCVJGmC+J0zvyZQkzQvzPWG+r3UAkiRBo6tkk3yB7u0kE1XVLv33ESsrJkmSZtLqtpJ3NZquJEnLpdWDC06e+p1kXWCrqjqvRbqwdSQAAAo8SURBVCySJA3R9Bxmkp2Bs4Cv9M3bJPl8y5gkSZqk9UU/BwOPAa4GqKqzgHu3DEiSpElaJ8w/VtU1Y+2mvRhIkqRWmj1LtndOkucBa/av9no1cErjmCRJup3WJcxXAQ8Bfg8cBVyLr/eSJM1DTUuYVXUD8Mb+I0nSvNU0YSY5kQnnLKvqyQ3CkSRpWq3PYb525Pc6wDOBmxrFIknStFpXyZ4+1uq/k5zaJBhJkmbQukr2biONawCPAu7SKBxJkqbVukp2tIR5E/BLYK9GsUiSNK1WbyvZqqp+VVU+1UeStEpodR/mZ6d+JDm2UQySJA3WKmFm5Pd9GsUgSdJgrRJmTfNbkqR5qdVFP49Ici1dSXPd/jd9c1XVho3ikiRpolYvkF6zxXQlSVperR++LknSKsGEKUnSACZMSZIGMGFKkjSACVOSpAFMmJIkDWDClCRpABOmJEkDmDAlSRrAhClJ0gCtXyA9p5KcD1wH3AzcVFWL20YkSVooFlTC7P1FVV3ROghJ0sJilawkSQMstIRZwNeSnJ5k70k9JNk7yWlJTluyZMlKDk+StKpaaAnzCVX1SOBpwN8medJ4D1V1WFUtrqrFm2yyycqPUJK0SlpQCbOqLu6/LweOBx7TNiJJ0kKxYBJmkvWSbDD1G9gROLttVJKkhWIhXSV7T+D4JNDN16er6ittQ5IkLRQLJmFW1S+AR7SOQ5K0MC2YKllJklYkE6YkSQOYMCVJGsCEKUnSACZMSZIGMGFKkjSACVOSpAFMmJIkDWDClCRpABOmJEkDmDAlSRrAhClJ0gAmTEmSBjBhSpI0gAlTkqQBTJiSJA1gwpQkaQATpiRJA5gwJUkawIQpSdIAJkxJkgYwYUqSNIAJU5KkAUyYkiQNYMKUJGkAE6YkSQOYMCVJGsCEKUnSACZMSZIGMGFKkjSACVOSpAFMmJIkDWDClCRpABOmJEkDmDAlSRrAhClJ0gAmTEmSBjBhSpI0gAlTkqQBTJiSJA1gwpQkaQATpiRJA5gwJUkawIQpSdIAJkxJkgYwYUqSNIAJU5KkAUyYkiQNYMKUJGkAE6YkSQMsqISZ5KlJzkvysyQHtI5HkrRwLJiEmWRN4IPA04CtgT2TbN02KknSQrFgEibwGOBnVfWLqvoDcDSwa+OYJEkLxEJKmJsDF440X9S3kyTpDlurdQArW5K9gb37xuuTnLeCJ7kxcMUKnsYdZYx33HyPD+Z/jPM2vvzzrT/nbYy9wfGNzNPyuNcdGnoVtZAS5sXAliPNW/TtllJVhwGHraygkpxWVYtX1vSWhzHecfM9Ppj/Mc73+GD+xzjf41vVLaQq2f8B7p/k3kn+BHgu8PnGMUmSFogFU8KsqpuSvBL4KrAmcHhVndM4LEnSArFgEiZAVX0J+FLrOMastOrfO8AY77j5Hh/M/xjne3ww/2Oc7/Gt0lJVrWOQJGneW0jnMCVJWmFMmCtIksOTXJ7k7NaxTJJkyyQnJvlxknOS7Ns6pnFJ1klyapIf9DG+tXVMkyRZM8mZSb7YOpZJkpyf5EdJzkpyWut4JkmyUZL/TPKTJOcmeXzrmKYkeWC/7KY+1ybZr3Vc45L8Xb+dnJ3kqCTrtI5pobFKdgVJ8iTgeuATVfXQ1vGMS7IpsGlVnZFkA+B0YLeq+nHj0G6VJMB6VXV9krWB7wD7VtX3Goe2lCT7A4uBDavqGa3jGZfkfGBxVc3b+weTfBz4dlV9pL/K/c5VdXXruMb1j+C8GHhsVV3QOp4pSTan2z62rqobkxwDfKmqjmgb2cJiCXMFqapvAVe1jmM6VXVJVZ3R/74OOJd59mSk6lzfN67df+bVEV6SLYCdgI+0jmVVleQuwJOAjwJU1R/mY7Ls7QD8fD4lyxFrAesmWQu4M/DrxvEsOCZMkWQRsC3w/baR3F5f3XkWcDnw9aqabzG+F3g9cEvrQGZQwNeSnN4/6Wq+uTewBPhYX7X9kSTrtQ5qGs8FjmodxLiquhh4F/Ar4BLgmqr6WtuoFh4T5mouyfrAscB+VXVt63jGVdXNVbUN3ZObHpNk3lRvJ3kGcHlVnd46llk8oaoeSfcmn7/tTxfMJ2sBjwQOraptgd8C8+71fH1V8S7Af7SOZVySu9K9bOLewGbAekle0DaqhceEuRrrzwseCxxZVce1jmcmfRXdicBTW8cyYjtgl/4c4dHAk5N8qm1It9eXPqiqy4Hj6d7sM59cBFw0Unvwn3QJdL55GnBGVV3WOpAJ/hL4ZVUtqao/AscBf9Y4pgXHhLma6i+o+ShwblW9u3U8kyTZJMlG/e91gacAP2kb1W2q6sCq2qKqFtFV1f1XVc2ro/ok6/UXddFXc+4IzKsrt6vqUuDCJA/sW+0AzJuLz0bsyTysju39Cnhckjv32/YOdNclaA6ZMFeQJEcB3wUemOSiJHu1jmnMdsAL6UpFU5fLP711UGM2BU5M8kO6ZwV/varm5a0b89g9ge8k+QFwKnBCVX2lcUyTvAo4sv+vtwHe3jiepfQHG0+hK7nNO33p/D+BM4Af0e3bferPHPO2EkmSBrCEKUnSACZMSZIGMGFKkjSACVOSpAFMmJIkDWDClCRpABOmNECSm8de8bTcj25Lcsocx/a4JN/v4zo3ycF9+13uSJySluZ9mNIASa6vqvVbxzFJkvOAParqB/3rpx44n17TJi0UljClO6B/OfNbk5zRv6T5QX37TZJ8vX+h70eSXJBk477b9f339klOGnlx8pH9Y81I8qgkJ/dvGPlq//7S6dyD7g0VUw+r/3E/jr9J8oH+92jp+MYkf94/Nu/wdC/pPjPJrituSUmrPhOmNMy6Y0nnOSPdrujfBnIo8Nq+3Vvoni37ELpHlm01zXi3BfYDtgbuA2zXPxT//cCzqupRwOHAP80Q23uA85Icn2SfJOuM91BV2/Rvffl74DTgFOCNfYyPAf4CeOc8fq2W1NxarQOQVhE39glnkqnni54O7N7/fgLw1wBV9ZUkv5lm2FOr6iLoSoHAIuBq4KHA1/sC55r0JchJquptSY6ke7D68+geEr79eH9J7g+8E/iLqvpjkh3p3rYyleTXoUvsPrRbmsCEKd1xv++/b2bZt6nfj/yeGj7AOVX1+KEjqaqfA4cm+TCwJMndR7v37z09BnhZVU0l3wDPrKrzljFmabVklay0Yvw3sAdAX5K76zIMex6wSZLH98OvneQh0/WcZKepc5/A/ekS79VjvR0OfKyqvj3S7qvAq0bOm267DDFKqx0TpjTM+DnMQ2bp/63AjknOBp4NXApcN2RCVfUH4FnAP/ev5TqLmV8G/EK6c5hnAZ8Enl9VN091THKvfnwvGYl/MfAPwNrAD5Oc0zdLmoa3lUgrQJI7ATdX1U19SfHQGc6BSloFeA5TWjG2Ao5JsgbwB+BljeORdAdZwpRWEUk+CGw31vp9VfWxFvFIqxsTpiRJA3jRjyRJA5gwJUkawIQpSdIAJkxJkgYwYUqSNMD/BzeCm4uI6gznAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(6,6))\n",
    "plt.bar(data[\"Engine_Size\"], data[\"Fuel_Consumption_comb(L/100km)\"],width=0.5)\n",
    "plt.title(\"Relationship between Engine_Size and Fuel_Consumption_comb(L/100km)\")\n",
    "plt.xlabel(\"Engine_Size\")\n",
    "plt.ylabel(\"Fuel_Consumption_comb(L/100km)\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7muCJ87-if96",
    "outputId": "7da27cea-623c-4057-e6fe-6e7df51bf454"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.254553561817953"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Engine_Size.cov(data[\"Fuel_Consumption_comb(L/100km)\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 367
    },
    "id": "rUJS86jHEicc",
    "outputId": "c40c6369-b830-44d2-e9e0-2206cee3b0cf"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Fuel_Consumption_comb(L/100km)')"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize =(6,5))\n",
    "plt.bar(data[\"Cylinders\"], data[\"Fuel_Consumption_comb(L/100km)\"],width = 1)\n",
    "plt.title(\"Relationship between Cylinders and Fuel_Consumption_comb(L/100km)\")\n",
    "plt.xlabel(\"Cylinders\")\n",
    "plt.ylabel(\"Fuel_Consumption_comb(L/100km)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PzGtpM0ChVzW",
    "outputId": "a818bc8c-6007-4488-fdf4-ab5c6220135b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.6587330669079"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Cylinders.cov(data[\"Fuel_Consumption_comb(L/100km)\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "FamJexWIG71I",
    "outputId": "1b025ee4-b094-4d1a-96fb-df718d1a7eb6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Make', 'Model', 'Vehicle_Class', 'Engine_Size', 'Cylinders',\n",
       "       'Transmission', 'Fuel_Consumption_comb(L/100km)', 'CO2_Emissions',\n",
       "       'Smog_Level'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EOsOamp1es-4",
    "outputId": "ebb53204-552d-46e4-ddaa-13cf16115f82"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5    341\n",
      "3    232\n",
      "7    176\n",
      "6    120\n",
      "1     66\n",
      "Name: Smog_Level, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4     407\n",
       "6     265\n",
       "8     213\n",
       "12     21\n",
       "3      18\n",
       "10      8\n",
       "16      2\n",
       "5       1\n",
       "Name: Cylinders, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(data[\"Smog_Level\"].value_counts())\n",
    "data[\"Cylinders\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "A9y9bdo0PCva",
    "outputId": "a7bfe5d2-414a-48b2-e14e-9c6376efa2cb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                             mean\n",
      "Cylinders Transmission Smog_Level Vehicle_Class           Engine_Size            \n",
      "3         A8           7          SUV: Small              1.5          196.333333\n",
      "          A9           7          SUV: Small              1.3          196.000000\n",
      "          AM7          7          Minicompact             1.5          176.000000\n",
      "                                  Subcompact              1.5          176.000000\n",
      "          AS6          5          SUV: Small              1.0          197.000000\n",
      "          AS8          7          Mid-size                1.5          202.000000\n",
      "          AV           5          Compact                 1.2          143.000000\n",
      "                       7          SUV: Small              1.2          188.000000\n",
      "                                                          1.3          179.000000\n",
      "          M5           5          Compact                 1.2          151.000000\n",
      "          M6           7          Minicompact             1.5          180.000000\n",
      "                                  Subcompact              1.5          180.000000\n",
      "4         A10          5          SUV: Standard           2.3          242.000000\n",
      "                                  Subcompact              2.3          232.500000\n",
      "          A6           3          Pickup truck: Small     2.8          300.400000\n",
      "                       6          Pickup truck: Small     2.5          262.500000\n",
      "                                  SUV: Small              2.4          218.000000\n",
      "                       7          SUV: Small              1.5          202.500000\n",
      "          A8           3          Mid-size                2.0          211.000000\n",
      "                                  SUV: Small              2.0          222.000000\n",
      "                       5          SUV: Small              2.0          237.000000\n",
      "                       6          Pickup truck: Standard  2.7          273.125000\n",
      "          A9           5          Mid-size                2.0          213.000000\n",
      "                                  SUV: Small              2.0          227.666667\n",
      "                                                          2.5          238.000000\n",
      "                                  SUV: Standard           2.0          254.000000\n",
      "                                                          2.5          238.000000\n",
      "                                  Special purpose vehicle 2.0          273.333333\n",
      "                       6          Compact                 2.0          204.000000\n",
      "                                  Mid-size                2.0          221.000000\n",
      "                                  SUV: Small              1.3          219.500000\n",
      "                                                          2.0          230.500000\n",
      "                                                          2.4          224.600000\n",
      "                                  Special purpose vehicle 2.4          232.000000\n",
      "                                  Station wagon: Small    2.0          214.000000\n",
      "                                  Subcompact              2.0          216.500000\n",
      "                       7          SUV: Small              1.5          206.000000\n",
      "                                                          2.0          224.000000\n",
      "                                  SUV: Standard           2.0          224.000000\n",
      "          AM6          7          Full-size               1.6           96.500000\n",
      "                                                          2.0          117.000000\n",
      "                                  Mid-size                1.6          103.000000\n",
      "                                  SUV: Small              1.6          176.000000\n",
      "                                  Station wagon: Small    1.6          114.666667\n",
      "          AM7          1          Two-seater              2.0          234.500000\n",
      "                                                          2.5          255.000000\n",
      "                       3          Subcompact              2.0          220.000000\n",
      "                       5          Compact                 2.0          206.000000\n",
      "                                  Full-size               1.6          190.000000\n",
      "                                  Mid-size                1.6          181.500000\n",
      "                                                          2.0          209.500000\n",
      "                                  SUV: Small              1.6          203.000000\n",
      "                                                          2.0          232.666667\n",
      "                                  Station wagon: Small    2.0          208.333333\n",
      "                                  Subcompact              2.0          209.500000\n",
      "                       7          Compact                 2.0          198.000000\n",
      "                                  Minicompact             2.0          191.000000\n",
      "                                  Subcompact              2.0          194.666667\n",
      "                                  Two-seater              2.0          216.000000\n",
      "          AM8          3          Compact                 2.0          245.000000\n",
      "                                                          2.4          199.000000\n",
      "                                  SUV: Small              2.0          243.000000\n",
      "                       5          Full-size               2.5          207.500000\n",
      "                                  SUV: Small              2.0          218.750000\n",
      "                                                          2.5          233.000000\n",
      "          AS10         3          Pickup truck: Standard  2.3          287.000000\n",
      "                       5          Pickup truck: Standard  2.3          256.000000\n",
      "                                  SUV: Small              2.3          299.500000\n",
      "                                  SUV: Standard           2.3          255.000000\n",
      "                                  Subcompact              2.3          239.000000\n",
      "                       6          Compact                 2.7          231.500000\n",
      "                                  Mid-size                2.0          206.333333\n",
      "                                  SUV: Small              2.0          237.000000\n",
      "                       7          Compact                 2.0          230.500000\n",
      "                                  Full-size               2.0          211.000000\n",
      "          AS6          3          Compact                 2.0          184.000000\n",
      "                                                          2.5          207.000000\n",
      "                                  Mid-size                2.5          208.500000\n",
      "                                  SUV: Small              2.0          229.000000\n",
      "                                                          2.5          220.000000\n",
      "                                  Two-seater              2.0          186.000000\n",
      "                       5          SUV: Small              1.4          207.000000\n",
      "                                                          2.0          220.333333\n",
      "                                                          2.4          230.666667\n",
      "                                                          2.5          237.000000\n",
      "                                  Special purpose vehicle 2.5          249.000000\n",
      "                       7          Compact                 2.0          178.000000\n",
      "                                                          2.5          188.500000\n",
      "                                  Mid-size                2.0          188.000000\n",
      "                                                          2.5          192.333333\n",
      "                                  SUV: Small              1.4          208.500000\n",
      "                                                          2.0          195.500000\n",
      "                                                          2.5          205.833333\n",
      "          AS7          3          Compact                 2.0          189.000000\n",
      "          AS8          3          Compact                 2.0          236.000000\n",
      "                                  Full-size               2.0          230.000000\n",
      "                                  Mid-size                2.0          210.000000\n",
      "                                  SUV: Small              2.0          256.500000\n",
      "                                  SUV: Standard           2.0          264.000000\n",
      "                                  Subcompact              2.0          208.000000\n",
      "                       5          Compact                 2.0          212.000000\n",
      "                                  Full-size               1.6          187.500000\n",
      "                                                          2.5          225.000000\n",
      "                                  SUV: Small              2.0          231.714286\n",
      "                                                          2.3          232.000000\n",
      "                                                          2.5          227.000000\n",
      "                                  SUV: Standard           2.0          236.000000\n",
      "                                                          2.5          248.000000\n",
      "                                  Special purpose vehicle 2.0          212.000000\n",
      "                                  Station wagon: Small    2.0          210.000000\n",
      "                                  Subcompact              2.0          222.000000\n",
      "                       6          Compact                 2.0          208.000000\n",
      "                                  Mid-size                2.5          195.250000\n",
      "                                  SUV: Small              2.5          188.333333\n",
      "                                  Special purpose vehicle 2.0          215.500000\n",
      "                       7          Compact                 1.4          169.500000\n",
      "                                                          2.0          208.250000\n",
      "                                  Full-size               2.5          182.000000\n",
      "                                  Mid-size                2.0          212.250000\n",
      "                                                          2.5          175.000000\n",
      "                                  Minicompact             2.0          194.000000\n",
      "                                  SUV: Small              2.0          220.900000\n",
      "                                                          2.5          224.500000\n",
      "                                  SUV: Standard           2.0          245.000000\n",
      "                                  Station wagon: Small    2.0          224.000000\n",
      "                                  Subcompact              2.0          210.500000\n",
      "                                  Two-seater              2.0          206.000000\n",
      "          AS9          7          SUV: Small              2.0          223.571429\n",
      "          AV           3          Mid-size                2.0          167.000000\n",
      "                                  Special purpose vehicle 2.0          223.000000\n",
      "                       5          Compact                 1.8          167.500000\n",
      "                                  Full-size               2.0          169.000000\n",
      "                                  Mid-size                2.0          164.000000\n",
      "                                  SUV: Small              1.5          184.500000\n",
      "                                  Station wagon: Small    1.8          187.000000\n",
      "                                  Subcompact              1.4          165.000000\n",
      "                       7          Compact                 1.5          115.000000\n",
      "                                                          1.6          158.000000\n",
      "                                                          1.8          106.000000\n",
      "                                  Full-size               1.5          168.000000\n",
      "                                                          2.0          123.000000\n",
      "                                  Mid-size                1.5          145.000000\n",
      "                                                          1.6          169.000000\n",
      "                                                          1.8          108.500000\n",
      "                                                          2.0          169.000000\n",
      "                                                          2.5          152.750000\n",
      "                                  Minivan                 2.5          155.000000\n",
      "                                  SUV: Small              2.5          139.000000\n",
      "                                  SUV: Standard           2.5          157.000000\n",
      "                                  Station wagon: Small    2.0          187.000000\n",
      "          AV1          3          Compact                 1.6          159.000000\n",
      "                       5          Mid-size                1.6          178.000000\n",
      "                                                          2.0          154.500000\n",
      "          AV10         7          Compact                 2.0          161.250000\n",
      "          AV6          5          SUV: Small              2.0          209.500000\n",
      "                                                          2.4          218.000000\n",
      "                       7          Compact                 2.0          135.000000\n",
      "                                  Mid-size                2.5          124.000000\n",
      "                                  SUV: Small              2.5          175.000000\n",
      "          AV7          3          Full-size               1.5          172.000000\n",
      "                                  Mid-size                1.5          165.000000\n",
      "                                                          2.0          172.000000\n",
      "                       5          Station wagon: Small    1.8          200.000000\n",
      "                       6          Mid-size                2.0          174.000000\n",
      "                                  SUV: Small              2.5          192.000000\n",
      "                                  Station wagon: Small    2.0          178.000000\n",
      "                       7          Full-size               1.5          176.000000\n",
      "          AV8          1          Compact                 2.0          269.000000\n",
      "                       3          Full-size               2.4          205.000000\n",
      "                                  SUV: Small              2.4          213.000000\n",
      "                                  SUV: Standard           2.4          244.000000\n",
      "                       5          SUV: Small              2.0          188.500000\n",
      "                                  Station wagon: Small    2.0          194.000000\n",
      "                       6          Full-size               2.5          184.000000\n",
      "                                  SUV: Small              2.0          207.000000\n",
      "                                                          2.5          190.000000\n",
      "                       7          SUV: Small              2.5          192.000000\n",
      "          M5           5          Subcompact              1.4          170.000000\n",
      "                       6          Mid-size                2.0          210.000000\n",
      "                                  Station wagon: Small    2.0          211.000000\n",
      "                       7          Compact                 1.6          181.000000\n",
      "          M6           1          Compact                 2.0          243.000000\n",
      "                                                          2.5          301.000000\n",
      "                                  Two-seater              2.0          245.000000\n",
      "                                                          2.5          263.000000\n",
      "                       3          Compact                 1.6          166.000000\n",
      "                                                          2.0          222.333333\n",
      "                                  Full-size               1.5          171.000000\n",
      "                                                          2.0          223.000000\n",
      "                                  Two-seater              2.0          189.000000\n",
      "                       5          Compact                 1.8          165.000000\n",
      "                                  Full-size               1.6          209.000000\n",
      "                                  Mid-size                1.6          184.000000\n",
      "                                                          2.0          182.500000\n",
      "                                  Station wagon: Small    2.0          212.000000\n",
      "                                  Subcompact              2.0          247.000000\n",
      "                                                          2.3          245.250000\n",
      "                       6          SUV: Small              2.0          220.000000\n",
      "                       7          Compact                 1.4          164.000000\n",
      "                                                          2.0          186.833333\n",
      "                                  Mid-size                2.0          186.000000\n",
      "                                                          2.5          197.000000\n",
      "                                  Minicompact             2.0          209.000000\n",
      "                                  Subcompact              2.0          206.000000\n",
      "          M7           5          SUV: Small              2.3          301.666667\n",
      "5         AM7          3          Subcompact              2.5          232.000000\n",
      "6         A10          3          Pickup truck: Standard  3.0          257.400000\n",
      "                                  SUV: Standard           3.0          273.777778\n",
      "          A6           6          Pickup truck: Standard  4.3          328.200000\n",
      "          A8           1          Pickup truck: Standard  3.0          255.000000\n",
      "                                  SUV: Small              3.0          265.000000\n",
      "                       3          Full-size               3.6          250.000000\n",
      "                                  Mid-size                2.9          271.000000\n",
      "                                                          3.6          250.000000\n",
      "                                  Pickup truck: Standard  3.6          287.000000\n",
      "                                  SUV: Small              2.9          288.000000\n",
      "                       5          Pickup truck: Standard  3.6          252.333333\n",
      "                                  SUV: Small              3.6          260.000000\n",
      "                       6          Pickup truck: Small     3.6          289.000000\n",
      "                       7          Pickup truck: Standard  3.6          290.000000\n",
      "                                  SUV: Small              3.6          277.000000\n",
      "                                  SUV: Standard           3.6          265.333333\n",
      "          A9           5          Compact                 3.0          266.000000\n",
      "                                  SUV: Small              3.0          274.500000\n",
      "                                                          3.2          254.000000\n",
      "                                  Station wagon: Small    3.0          249.000000\n",
      "                                  Subcompact              3.0          252.500000\n",
      "                       6          Compact                 3.0          239.666667\n",
      "                                  Full-size               3.0          230.000000\n",
      "                                  Mid-size                3.0          221.000000\n",
      "                                  SUV: Small              3.6          251.500000\n",
      "                                  SUV: Standard           3.0          264.750000\n",
      "                                                          3.6          264.166667\n",
      "                                  Station wagon: Mid-size 3.0          232.000000\n",
      "                                  Subcompact              3.0          227.750000\n",
      "                       7          Minivan                 3.6          259.000000\n",
      "          AM6          3          Subcompact              3.8          300.000000\n",
      "          AM7          3          Subcompact              3.0          293.000000\n",
      "                                  Two-seater              3.5          393.000000\n",
      "                       5          Mid-size                3.0          227.000000\n",
      "                                  SUV: Small              2.9          289.000000\n",
      "                                                          3.0          274.000000\n",
      "                                  Station wagon: Mid-size 3.0          247.000000\n",
      "                                  Two-seater              4.0          265.500000\n",
      "          AM8          5          Full-size               2.9          281.571429\n",
      "                                  Minicompact             3.0          274.400000\n",
      "                                                          3.7          323.500000\n",
      "          AM9          3          Two-seater              3.5          256.000000\n",
      "          AS10         1          Pickup truck: Standard  3.0          287.000000\n",
      "                                  Van: Passenger          3.5          336.750000\n",
      "                       5          Mid-size                3.0          256.250000\n",
      "                                                          3.5          269.000000\n",
      "                                  Minivan                 3.5          248.000000\n",
      "                                  Pickup truck: Standard  3.5          223.000000\n",
      "                                  SUV: Standard           3.0          278.500000\n",
      "                                                          3.3          225.000000\n",
      "                                                          3.5          306.333333\n",
      "                       6          Pickup truck: Standard  2.7          268.000000\n",
      "                                                          3.3          257.000000\n",
      "                                                          3.5          326.125000\n",
      "                                  SUV: Small              2.7          309.666667\n",
      "                                  Subcompact              3.6          251.000000\n",
      "          AS5          5          SUV: Standard           4.0          321.000000\n",
      "          AS6          5          Compact                 3.5          253.000000\n",
      "                                  Pickup truck: Small     3.5          278.000000\n",
      "                                  Subcompact              3.5          253.000000\n",
      "          AS7          3          Mid-size                3.0          257.500000\n",
      "                                  Subcompact              3.0          255.500000\n",
      "          AS8          3          Compact                 3.3          284.000000\n",
      "                                  Full-size               3.0          292.000000\n",
      "                                  Mid-size                3.0          282.333333\n",
      "                                                          3.3          279.000000\n",
      "                                  SUV: Small              3.0          339.000000\n",
      "                                  SUV: Standard           3.0          271.200000\n",
      "                                  Subcompact              3.0          228.000000\n",
      "                       5          Compact                 3.0          225.500000\n",
      "                                  Full-size               3.0          239.000000\n",
      "                                                          3.5          262.000000\n",
      "                                  Mid-size                2.9          258.666667\n",
      "                                                          3.0          237.000000\n",
      "                                                          3.5          216.333333\n",
      "                                  Minivan                 3.3          272.000000\n",
      "                                  SUV: Small              2.7          262.000000\n",
      "                                                          3.0          254.500000\n",
      "                                                          3.5          250.250000\n",
      "                                                          3.6          289.000000\n",
      "                                                          3.8          265.000000\n",
      "                                  SUV: Standard           2.9          282.000000\n",
      "                                                          3.0          275.500000\n",
      "                                                          3.5          279.000000\n",
      "                                                          3.6          301.000000\n",
      "                                                          3.8          257.500000\n",
      "                                  Subcompact              2.9          269.000000\n",
      "                                                          3.0          231.666667\n",
      "                                  Two-seater              3.0          219.500000\n",
      "                       7          Two-seater              3.0          265.000000\n",
      "          AS9          3          Pickup truck: Standard  3.5          271.000000\n",
      "                                  SUV: Small              3.5          260.500000\n",
      "                       6          SUV: Small              3.6          266.000000\n",
      "          AV10         7          Mid-size                3.5          213.000000\n",
      "                                  Subcompact              3.5          189.000000\n",
      "          AV6          7          SUV: Standard           3.5          187.500000\n",
      "          AV7          3          Mid-size                3.5          233.000000\n",
      "                       5          Station wagon: Mid-size 3.5          242.500000\n",
      "          M6           3          Subcompact              3.0          273.000000\n",
      "                       5          Pickup truck: Small     3.5          299.500000\n",
      "                                  Two-seater              4.0          285.000000\n",
      "                       6          Subcompact              3.6          281.000000\n",
      "                       7          Pickup truck: Standard  3.6          296.000000\n",
      "                                  SUV: Small              3.6          281.000000\n",
      "          M7           5          Minicompact             3.0          274.600000\n",
      "8         A10          3          Pickup truck: Standard  6.2          331.125000\n",
      "                                  SUV: Standard           6.2          352.000000\n",
      "                       5          Pickup truck: Standard  5.3          309.750000\n",
      "                                  SUV: Standard           5.3          322.625000\n",
      "          A6           3          Pickup truck: Standard  5.3          332.000000\n",
      "                       5          Pickup truck: Standard  5.3          341.181818\n",
      "          A8           1          Full-size               6.2          368.000000\n",
      "                                                          6.4          306.000000\n",
      "                                  Mid-size                6.2          349.000000\n",
      "                                                          6.4          306.000000\n",
      "                                  Pickup truck: Standard  6.2          465.000000\n",
      "                                  SUV: Standard           6.2          411.500000\n",
      "                                                          6.4          365.500000\n",
      "                       3          Full-size               5.7          289.000000\n",
      "                                  Mid-size                5.7          289.000000\n",
      "                                  Minicompact             4.0          271.000000\n",
      "                                  Pickup truck: Standard  5.7          324.500000\n",
      "                                  SUV: Standard           5.7          331.000000\n",
      "                                  Two-seater              4.0          270.000000\n",
      "                       5          Pickup truck: Standard  5.3          317.400000\n",
      "                                                          5.7          307.250000\n",
      "                                  SUV: Standard           5.7          331.000000\n",
      "          A9           3          Compact                 4.0          269.000000\n",
      "                                  Mid-size                4.0          301.000000\n",
      "                                  SUV: Standard           4.0          348.571429\n",
      "                                  Station wagon: Mid-size 4.0          300.000000\n",
      "                                  Subcompact              4.0          277.000000\n",
      "                       5          Compact                 4.0          302.250000\n",
      "                                  Full-size               4.0          293.000000\n",
      "                                  SUV: Small              4.0          315.000000\n",
      "                                  SUV: Standard           4.0          305.000000\n",
      "                                  Subcompact              4.0          299.500000\n",
      "          AM7          3          Subcompact              5.2          393.000000\n",
      "                                  Two-seater              4.0          332.250000\n",
      "          AM8          3          Full-size               4.0          324.800000\n",
      "                                  Mid-size                4.0          323.000000\n",
      "                                  Minicompact             4.0          290.000000\n",
      "                                  Subcompact              4.0          290.000000\n",
      "          AS10         1          Subcompact              6.2          318.000000\n",
      "                       3          Subcompact              5.0          305.000000\n",
      "                       5          Minicompact             5.0          304.000000\n",
      "                                  Pickup truck: Standard  5.0          298.000000\n",
      "                                  Subcompact              5.0          294.000000\n",
      "          AS6          3          SUV: Standard           4.6          337.000000\n",
      "                       5          Pickup truck: Standard  5.7          376.500000\n",
      "                                  SUV: Standard           5.7          384.000000\n",
      "          AS7          3          SUV: Standard           5.6          359.000000\n",
      "          AS8          1          Full-size               3.8          348.000000\n",
      "                                  Mid-size                3.8          348.000000\n",
      "                                  SUV: Standard           3.8          349.000000\n",
      "                       3          Full-size               4.0          323.500000\n",
      "                                                          4.4          281.000000\n",
      "                                  Mid-size                4.0          315.000000\n",
      "                                                          4.4          307.500000\n",
      "                                  SUV: Standard           4.0          335.444444\n",
      "                                                          4.4          337.750000\n",
      "                                                          5.7          395.000000\n",
      "                                  Station wagon: Mid-size 4.0          319.000000\n",
      "                                  Subcompact              4.4          307.500000\n",
      "                                  Two-seater              5.0          299.000000\n",
      "                                                          6.2          290.000000\n",
      "                       5          Full-size               5.0          303.000000\n",
      "                                  Subcompact              5.0          285.000000\n",
      "          AS9          5          Pickup truck: Standard  5.6          317.500000\n",
      "          M6           1          Mid-size                5.7          307.000000\n",
      "                                                          6.2          352.000000\n",
      "                                                          6.4          325.000000\n",
      "                                  Subcompact              6.2          322.500000\n",
      "                       3          Subcompact              5.0          319.500000\n",
      "          M7           3          Two-seater              4.0          333.000000\n",
      "10        AM7          1          Two-seater              5.2          355.750000\n",
      "12        A8           3          Minicompact             5.2          318.000000\n",
      "          AM7          1          Two-seater              6.5          517.500000\n",
      "          AM8          3          Mid-size                6.0          373.000000\n",
      "                                  Minicompact             6.0          373.000000\n",
      "                                  Subcompact              6.0          364.000000\n",
      "          AS8          3          Compact                 6.6          408.000000\n",
      "                                  Full-size               6.6          354.000000\n",
      "                                                          6.7          384.500000\n",
      "                                  Mid-size                6.6          387.000000\n",
      "                                  SUV: Standard           6.0          383.000000\n",
      "                                  Station wagon: Mid-size 6.7          386.000000\n",
      "16        AM7          1          Two-seater              8.0          565.000000\n"
     ]
    }
   ],
   "source": [
    "x=data.groupby([\"Cylinders\",'Transmission','Smog_Level','Vehicle_Class','Engine_Size'],as_index=False)[\"CO2_Emissions\"].agg(['mean'])\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DHXAs2q4Q1Md",
    "outputId": "8cb795a0-dfe8-48cd-b92f-3f877c7d3d5d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5    341\n",
       "3    232\n",
       "7    176\n",
       "6    120\n",
       "1     66\n",
       "Name: Smog_Level, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Smog_Level.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 422
    },
    "id": "pU04M9RtQwma",
    "outputId": "d544cd20-859c-409c-b233-18b0a570ba81"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Cylinders')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,6))\n",
    "plt.bar(data.Smog_Level,data.Cylinders)\n",
    "plt.title(\"Relationship between Smog_Level and Cylinders\")\n",
    "plt.xlabel(\"Smog_Level\")\n",
    "plt.ylabel(\"Cylinders\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IfwHHgkzSNSP",
    "outputId": "67c67732-2635-4479-9deb-a0d4927d0118"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.8035933080649051"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Smog_Level.cov(data.Cylinders)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 421
    },
    "id": "jkFnn6a7F5Hd",
    "outputId": "c3c2a7f1-c77e-453f-e523-76e88c7cdafd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Engine_Size')"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (6,6))\n",
    "plt.bar(data[\"Cylinders\"], data[\"Engine_Size\"])\n",
    "plt.title(\"Relationship between Cylinders and Engine_Size\")\n",
    "plt.xlabel(\"Cylinders\")\n",
    "plt.ylabel(\"Engine_Size\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 412
    },
    "id": "Ch2iM4TN8TI9",
    "outputId": "ceb0a70c-45a9-4999-ed07-9f4e42cb17f5"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.CO2_Emissions.hist(color = 'maroon',figsize = (6,6))\n",
    "plt.title('Distribution of Target Variable without Outliers', fontsize = 15)\n",
    "plt.xlabel('CO2_Emissions', fontsize = 15)\n",
    "plt.ylabel('Frequency', fontsize = 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "G4CqgE5z0H5U"
   },
   "source": [
    "                         \n",
    "  Here is no missing Values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bTHVTGD9sPRS",
    "outputId": "58cb20f5-76e6-4077-da3d-43a8de091e31"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of x_train (654, 8)\n",
      "shape of x_test (281, 8)\n",
      "Shape of Y_train (654,)\n",
      "Shape of Y_test (281,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,Y_train,Y_test = train_test_split(X,y,test_size=0.3,random_state = 1)\n",
    "print('Shape of x_train',x_train.shape)\n",
    "print('shape of x_test',x_test.shape)\n",
    "print('Shape of Y_train',Y_train.shape)\n",
    "print('Shape of Y_test',Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c2LhQKhFyvYC",
    "outputId": "148eb803-4fa3-4f88-f454-e74215489452"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'> <class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "x_train=x_train.reset_index(drop=True)\n",
    "x_test = x_test.reset_index(drop=True)\n",
    "print(type(x_train),type(x_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0gj_-Cm63Z0P",
    "outputId": "5a403d51-df27-4005-9239-eb01140597e6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    130\n",
      "1    237\n",
      "2    308\n",
      "3    278\n",
      "4    309\n",
      "Name: CO2_Emissions, dtype: int64\n",
      "0    279\n",
      "1    269\n",
      "2    205\n",
      "3    205\n",
      "4    281\n",
      "Name: CO2_Emissions, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "Y_train=Y_train.reset_index(drop=True)\n",
    "Y_test=Y_test.reset_index(drop=True)\n",
    "print(Y_train.head())\n",
    "print(Y_test.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "mesPZYEeMPBo",
    "outputId": "e0b6717a-62d6-4084-cf67-de60f2e96319"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(654, 4)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "(281, 4)\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "x_num=x_train[x_train.columns[x_train.dtypes != 'object']]\n",
    "print(x_num.shape)\n",
    "print(type(x_num))\n",
    "\n",
    "x_num_test=x_test[x_train.columns[x_train.dtypes != 'object']]\n",
    "print(x_num_test.shape)\n",
    "print(type(x_num_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OAC1UheU462z",
    "outputId": "fc9855ee-9a28-466e-b841-fcd5f6f88252"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(654, 4) <class 'pandas.core.frame.DataFrame'>\n",
      "\n",
      " (281, 4) <class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "x_num_tr = scaler.fit_transform(x_num)\n",
    "x_num_te = scaler.transform(x_num_test)\n",
    "x_num_tr = pd.DataFrame(x_num_tr)\n",
    "x_num_te = pd.DataFrame(x_num_te)\n",
    "print(x_num_tr.shape,type(x_num_tr))\n",
    "print('\\n',x_num_te.shape,type(x_num_te))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UUG3ixycqlbq",
    "outputId": "dbfad043-6229-41d2-9b36-ae17fdd69417"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(654, 1)\n",
      "(281, 1)\n"
     ]
    }
   ],
   "source": [
    "Y_train= Y_train.values.reshape(-1, 1)\n",
    "Y_test = Y_test.values.reshape(-1, 1)\n",
    "print(Y_train.shape)\n",
    "print(Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "id": "EKeexzF92Hgi"
   },
   "outputs": [],
   "source": [
    "Y_tr = scaler.fit_transform(Y_train)\n",
    "Y_te = scaler.transform(Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 223
    },
    "id": "jE5UhIh-yUPS",
    "outputId": "31cc8129-6e28-4df2-8b85-d4f76a9f9a99"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(654, 4)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-203d2286-47ae-49ed-bc2e-94d7291ad6c5\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Vehicle_Class</th>\n",
       "      <th>Transmission</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lexus</td>\n",
       "      <td>UX 250h</td>\n",
       "      <td>Compact</td>\n",
       "      <td>AV6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Audi</td>\n",
       "      <td>S4 Sedan quattro</td>\n",
       "      <td>Compact</td>\n",
       "      <td>AS8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ford</td>\n",
       "      <td>Bronco Sasquatch 4WD</td>\n",
       "      <td>SUV: Small</td>\n",
       "      <td>AS10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Porsche</td>\n",
       "      <td>911 Targa 4S</td>\n",
       "      <td>Minicompact</td>\n",
       "      <td>M7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>Tahoe</td>\n",
       "      <td>SUV: Standard</td>\n",
       "      <td>A10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-203d2286-47ae-49ed-bc2e-94d7291ad6c5')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-203d2286-47ae-49ed-bc2e-94d7291ad6c5 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-203d2286-47ae-49ed-bc2e-94d7291ad6c5');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "        Make                 Model  Vehicle_Class Transmission\n",
       "0      Lexus               UX 250h        Compact          AV6\n",
       "1       Audi      S4 Sedan quattro        Compact          AS8\n",
       "2       Ford  Bronco Sasquatch 4WD     SUV: Small         AS10\n",
       "3    Porsche          911 Targa 4S    Minicompact           M7\n",
       "4  Chevrolet                 Tahoe  SUV: Standard          A10"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_cat=x_train[x_train.columns[x_train.dtypes == 'object']]\n",
    "print(x_cat.shape)\n",
    "x_cat.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 223
    },
    "id": "MDO6ghBv14gD",
    "outputId": "0ef59a6a-7dbe-43f9-8a5d-da2ba915213f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(281, 4)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-a311c6ba-cad4-428a-967a-82cc336b642a\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Vehicle_Class</th>\n",
       "      <th>Transmission</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Genesis</td>\n",
       "      <td>GV80 AWD</td>\n",
       "      <td>SUV: Standard</td>\n",
       "      <td>AS8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Audi</td>\n",
       "      <td>RS 5 Coupe quattro</td>\n",
       "      <td>Subcompact</td>\n",
       "      <td>AS8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Subaru</td>\n",
       "      <td>Legacy AWD</td>\n",
       "      <td>Full-size</td>\n",
       "      <td>AV8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kia</td>\n",
       "      <td>Seltos AWD</td>\n",
       "      <td>SUV: Small</td>\n",
       "      <td>AM7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Audi</td>\n",
       "      <td>Q7 55 TFSI quattro</td>\n",
       "      <td>SUV: Standard</td>\n",
       "      <td>AS8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a311c6ba-cad4-428a-967a-82cc336b642a')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-a311c6ba-cad4-428a-967a-82cc336b642a button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-a311c6ba-cad4-428a-967a-82cc336b642a');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "      Make               Model  Vehicle_Class Transmission\n",
       "0  Genesis            GV80 AWD  SUV: Standard          AS8\n",
       "1     Audi  RS 5 Coupe quattro     Subcompact          AS8\n",
       "2   Subaru          Legacy AWD      Full-size          AV8\n",
       "3      Kia          Seltos AWD     SUV: Small          AM7\n",
       "4     Audi  Q7 55 TFSI quattro  SUV: Standard          AS8"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test\n",
    "x_cat_test=x_test[x_train.columns[x_train.dtypes == 'object']]\n",
    "print(x_cat_test.shape)\n",
    "x_cat_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "v4uBroH2yUMD",
    "outputId": "7cd2ffbf-6429-474e-bda3-5f99ca97b230"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(654, 588)\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "ohe=OneHotEncoder(sparse=False,handle_unknown=\"ignore\")\n",
    "x_nom=x_cat.drop('Vehicle_Class',axis =1)\n",
    "x_ohe=ohe.fit_transform(x_nom)\n",
    "x_ohe = pd.DataFrame(x_ohe)\n",
    "print(x_ohe.shape)\n",
    "print(type(x_ohe))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MX5PUhQe3eNM",
    "outputId": "bcf93546-2211-4846-aafa-00d222a9e7a9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(281, 588)\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "x_nom_test=x_cat_test.drop('Vehicle_Class',axis =1)\n",
    "x_ohe_test=ohe.transform(x_nom_test)\n",
    "x_ohe_test = pd.DataFrame(x_ohe_test)\n",
    "print(x_ohe_test.shape)\n",
    "print(type(x_ohe_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_hb-OJy6yUIw",
    "outputId": "a4e48f6e-5333-4fcc-b739-2efd58689487"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   0\n",
      "0  0\n",
      "1  0\n",
      "2  7\n",
      "3  3\n",
      "4  8\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "(654, 1)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_label.py:115: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le=LabelEncoder()\n",
    "ps=['Vehicle_Class']\n",
    "x_le=x_cat[ps]\n",
    "le=LabelEncoder()\n",
    "x_label =le.fit_transform(x_le)\n",
    "x_label = pd.DataFrame(x_label)\n",
    "print(x_label.head())\n",
    "print(type(x_label))\n",
    "print(x_label.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_0vr8ZPg4VZD",
    "outputId": "d7207143-f532-4aed-82b4-c23819186933"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(281, 1)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "    0\n",
      "0   8\n",
      "1  12\n",
      "2   1\n",
      "3   7\n",
      "4   8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_block(indexer, value, name)\n",
      "/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:723: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  iloc._setitem_with_indexer(indexer, value, self.name)\n"
     ]
    }
   ],
   "source": [
    "#test\n",
    "ps=['Vehicle_Class']\n",
    "x_le_test=x_cat_test[ps]\n",
    "x_le_test.loc[~x_le_test['Vehicle_Class'].isin(le.classes_),'Vehicle_Class'] = -1\n",
    "x_label_test = x_le_test.loc[x_le_test['Vehicle_Class'].isin(le.classes_),'Vehicle_Class'] = le.transform(x_le_test['Vehicle_Class'][x_le_test['Vehicle_Class'].isin(le.classes_)])\n",
    "x_label_test = pd.DataFrame(x_label_test)\n",
    "print(x_label_test.shape)\n",
    "print(type(x_label_test))\n",
    "print(x_label_test.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 162
    },
    "id": "JW3McUVlr5lB",
    "outputId": "0db84c59-858f-417c-e6a6-4d4b7b7b651a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(654, 593)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-52f8e0d6-94c6-45d5-903a-27a1d0a01401\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "      <th>31</th>\n",
       "      <th>32</th>\n",
       "      <th>33</th>\n",
       "      <th>34</th>\n",
       "      <th>35</th>\n",
       "      <th>36</th>\n",
       "      <th>37</th>\n",
       "      <th>38</th>\n",
       "      <th>39</th>\n",
       "      <th>40</th>\n",
       "      <th>41</th>\n",
       "      <th>42</th>\n",
       "      <th>43</th>\n",
       "      <th>44</th>\n",
       "      <th>45</th>\n",
       "      <th>46</th>\n",
       "      <th>47</th>\n",
       "      <th>48</th>\n",
       "      <th>49</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "      <th>60</th>\n",
       "      <th>61</th>\n",
       "      <th>62</th>\n",
       "      <th>63</th>\n",
       "      <th>64</th>\n",
       "      <th>65</th>\n",
       "      <th>66</th>\n",
       "      <th>67</th>\n",
       "      <th>68</th>\n",
       "      <th>69</th>\n",
       "      <th>70</th>\n",
       "      <th>71</th>\n",
       "      <th>72</th>\n",
       "      <th>73</th>\n",
       "      <th>74</th>\n",
       "      <th>75</th>\n",
       "      <th>76</th>\n",
       "      <th>77</th>\n",
       "      <th>78</th>\n",
       "      <th>79</th>\n",
       "      <th>80</th>\n",
       "      <th>81</th>\n",
       "      <th>82</th>\n",
       "      <th>83</th>\n",
       "      <th>84</th>\n",
       "      <th>85</th>\n",
       "      <th>86</th>\n",
       "      <th>87</th>\n",
       "      <th>88</th>\n",
       "      <th>89</th>\n",
       "      <th>90</th>\n",
       "      <th>91</th>\n",
       "      <th>92</th>\n",
       "      <th>93</th>\n",
       "      <th>94</th>\n",
       "      <th>95</th>\n",
       "      <th>96</th>\n",
       "      <th>97</th>\n",
       "      <th>98</th>\n",
       "      <th>99</th>\n",
       "      <th>100</th>\n",
       "      <th>101</th>\n",
       "      <th>102</th>\n",
       "      <th>103</th>\n",
       "      <th>104</th>\n",
       "      <th>105</th>\n",
       "      <th>106</th>\n",
       "      <th>107</th>\n",
       "      <th>108</th>\n",
       "      <th>109</th>\n",
       "      <th>110</th>\n",
       "      <th>111</th>\n",
       "      <th>112</th>\n",
       "      <th>113</th>\n",
       "      <th>114</th>\n",
       "      <th>115</th>\n",
       "      <th>116</th>\n",
       "      <th>117</th>\n",
       "      <th>118</th>\n",
       "      <th>119</th>\n",
       "      <th>120</th>\n",
       "      <th>121</th>\n",
       "      <th>122</th>\n",
       "      <th>123</th>\n",
       "      <th>124</th>\n",
       "      <th>125</th>\n",
       "      <th>126</th>\n",
       "      <th>127</th>\n",
       "      <th>128</th>\n",
       "      <th>129</th>\n",
       "      <th>130</th>\n",
       "      <th>131</th>\n",
       "      <th>132</th>\n",
       "      <th>133</th>\n",
       "      <th>134</th>\n",
       "      <th>135</th>\n",
       "      <th>136</th>\n",
       "      <th>137</th>\n",
       "      <th>138</th>\n",
       "      <th>139</th>\n",
       "      <th>140</th>\n",
       "      <th>141</th>\n",
       "      <th>142</th>\n",
       "      <th>143</th>\n",
       "      <th>144</th>\n",
       "      <th>145</th>\n",
       "      <th>146</th>\n",
       "      <th>147</th>\n",
       "      <th>148</th>\n",
       "      <th>149</th>\n",
       "      <th>150</th>\n",
       "      <th>151</th>\n",
       "      <th>152</th>\n",
       "      <th>153</th>\n",
       "      <th>154</th>\n",
       "      <th>155</th>\n",
       "      <th>156</th>\n",
       "      <th>157</th>\n",
       "      <th>158</th>\n",
       "      <th>159</th>\n",
       "      <th>160</th>\n",
       "      <th>161</th>\n",
       "      <th>162</th>\n",
       "      <th>163</th>\n",
       "      <th>164</th>\n",
       "      <th>165</th>\n",
       "      <th>166</th>\n",
       "      <th>167</th>\n",
       "      <th>168</th>\n",
       "      <th>169</th>\n",
       "      <th>170</th>\n",
       "      <th>171</th>\n",
       "      <th>172</th>\n",
       "      <th>173</th>\n",
       "      <th>174</th>\n",
       "      <th>175</th>\n",
       "      <th>176</th>\n",
       "      <th>177</th>\n",
       "      <th>178</th>\n",
       "      <th>179</th>\n",
       "      <th>180</th>\n",
       "      <th>181</th>\n",
       "      <th>182</th>\n",
       "      <th>183</th>\n",
       "      <th>184</th>\n",
       "      <th>185</th>\n",
       "      <th>186</th>\n",
       "      <th>187</th>\n",
       "      <th>188</th>\n",
       "      <th>189</th>\n",
       "      <th>190</th>\n",
       "      <th>191</th>\n",
       "      <th>192</th>\n",
       "      <th>193</th>\n",
       "      <th>194</th>\n",
       "      <th>195</th>\n",
       "      <th>196</th>\n",
       "      <th>197</th>\n",
       "      <th>198</th>\n",
       "      <th>199</th>\n",
       "      <th>200</th>\n",
       "      <th>201</th>\n",
       "      <th>202</th>\n",
       "      <th>203</th>\n",
       "      <th>204</th>\n",
       "      <th>205</th>\n",
       "      <th>206</th>\n",
       "      <th>207</th>\n",
       "      <th>208</th>\n",
       "      <th>209</th>\n",
       "      <th>210</th>\n",
       "      <th>211</th>\n",
       "      <th>212</th>\n",
       "      <th>213</th>\n",
       "      <th>214</th>\n",
       "      <th>215</th>\n",
       "      <th>216</th>\n",
       "      <th>217</th>\n",
       "      <th>218</th>\n",
       "      <th>219</th>\n",
       "      <th>220</th>\n",
       "      <th>221</th>\n",
       "      <th>222</th>\n",
       "      <th>223</th>\n",
       "      <th>224</th>\n",
       "      <th>225</th>\n",
       "      <th>226</th>\n",
       "      <th>227</th>\n",
       "      <th>228</th>\n",
       "      <th>229</th>\n",
       "      <th>230</th>\n",
       "      <th>231</th>\n",
       "      <th>232</th>\n",
       "      <th>233</th>\n",
       "      <th>234</th>\n",
       "      <th>235</th>\n",
       "      <th>236</th>\n",
       "      <th>237</th>\n",
       "      <th>238</th>\n",
       "      <th>239</th>\n",
       "      <th>240</th>\n",
       "      <th>241</th>\n",
       "      <th>242</th>\n",
       "      <th>243</th>\n",
       "      <th>244</th>\n",
       "      <th>245</th>\n",
       "      <th>246</th>\n",
       "      <th>247</th>\n",
       "      <th>248</th>\n",
       "      <th>249</th>\n",
       "      <th>250</th>\n",
       "      <th>251</th>\n",
       "      <th>252</th>\n",
       "      <th>253</th>\n",
       "      <th>254</th>\n",
       "      <th>255</th>\n",
       "      <th>256</th>\n",
       "      <th>257</th>\n",
       "      <th>258</th>\n",
       "      <th>259</th>\n",
       "      <th>260</th>\n",
       "      <th>261</th>\n",
       "      <th>262</th>\n",
       "      <th>263</th>\n",
       "      <th>264</th>\n",
       "      <th>265</th>\n",
       "      <th>266</th>\n",
       "      <th>267</th>\n",
       "      <th>268</th>\n",
       "      <th>269</th>\n",
       "      <th>270</th>\n",
       "      <th>271</th>\n",
       "      <th>272</th>\n",
       "      <th>273</th>\n",
       "      <th>274</th>\n",
       "      <th>275</th>\n",
       "      <th>276</th>\n",
       "      <th>277</th>\n",
       "      <th>278</th>\n",
       "      <th>279</th>\n",
       "      <th>280</th>\n",
       "      <th>281</th>\n",
       "      <th>282</th>\n",
       "      <th>283</th>\n",
       "      <th>284</th>\n",
       "      <th>285</th>\n",
       "      <th>286</th>\n",
       "      <th>287</th>\n",
       "      <th>288</th>\n",
       "      <th>289</th>\n",
       "      <th>290</th>\n",
       "      <th>291</th>\n",
       "      <th>292</th>\n",
       "      <th>293</th>\n",
       "      <th>294</th>\n",
       "      <th>295</th>\n",
       "      <th>296</th>\n",
       "      <th>297</th>\n",
       "      <th>298</th>\n",
       "      <th>299</th>\n",
       "      <th>300</th>\n",
       "      <th>301</th>\n",
       "      <th>302</th>\n",
       "      <th>303</th>\n",
       "      <th>304</th>\n",
       "      <th>305</th>\n",
       "      <th>306</th>\n",
       "      <th>307</th>\n",
       "      <th>308</th>\n",
       "      <th>309</th>\n",
       "      <th>310</th>\n",
       "      <th>311</th>\n",
       "      <th>312</th>\n",
       "      <th>313</th>\n",
       "      <th>314</th>\n",
       "      <th>315</th>\n",
       "      <th>316</th>\n",
       "      <th>317</th>\n",
       "      <th>318</th>\n",
       "      <th>319</th>\n",
       "      <th>320</th>\n",
       "      <th>321</th>\n",
       "      <th>322</th>\n",
       "      <th>323</th>\n",
       "      <th>324</th>\n",
       "      <th>325</th>\n",
       "      <th>326</th>\n",
       "      <th>327</th>\n",
       "      <th>328</th>\n",
       "      <th>329</th>\n",
       "      <th>330</th>\n",
       "      <th>331</th>\n",
       "      <th>332</th>\n",
       "      <th>333</th>\n",
       "      <th>334</th>\n",
       "      <th>335</th>\n",
       "      <th>336</th>\n",
       "      <th>337</th>\n",
       "      <th>338</th>\n",
       "      <th>339</th>\n",
       "      <th>340</th>\n",
       "      <th>341</th>\n",
       "      <th>342</th>\n",
       "      <th>343</th>\n",
       "      <th>344</th>\n",
       "      <th>345</th>\n",
       "      <th>346</th>\n",
       "      <th>347</th>\n",
       "      <th>348</th>\n",
       "      <th>349</th>\n",
       "      <th>350</th>\n",
       "      <th>351</th>\n",
       "      <th>352</th>\n",
       "      <th>353</th>\n",
       "      <th>354</th>\n",
       "      <th>355</th>\n",
       "      <th>356</th>\n",
       "      <th>357</th>\n",
       "      <th>358</th>\n",
       "      <th>359</th>\n",
       "      <th>360</th>\n",
       "      <th>361</th>\n",
       "      <th>362</th>\n",
       "      <th>363</th>\n",
       "      <th>364</th>\n",
       "      <th>365</th>\n",
       "      <th>366</th>\n",
       "      <th>367</th>\n",
       "      <th>368</th>\n",
       "      <th>369</th>\n",
       "      <th>370</th>\n",
       "      <th>371</th>\n",
       "      <th>372</th>\n",
       "      <th>373</th>\n",
       "      <th>374</th>\n",
       "      <th>375</th>\n",
       "      <th>376</th>\n",
       "      <th>377</th>\n",
       "      <th>378</th>\n",
       "      <th>379</th>\n",
       "      <th>380</th>\n",
       "      <th>381</th>\n",
       "      <th>382</th>\n",
       "      <th>383</th>\n",
       "      <th>384</th>\n",
       "      <th>385</th>\n",
       "      <th>386</th>\n",
       "      <th>387</th>\n",
       "      <th>388</th>\n",
       "      <th>389</th>\n",
       "      <th>390</th>\n",
       "      <th>391</th>\n",
       "      <th>392</th>\n",
       "      <th>393</th>\n",
       "      <th>394</th>\n",
       "      <th>395</th>\n",
       "      <th>396</th>\n",
       "      <th>397</th>\n",
       "      <th>398</th>\n",
       "      <th>399</th>\n",
       "      <th>400</th>\n",
       "      <th>401</th>\n",
       "      <th>402</th>\n",
       "      <th>403</th>\n",
       "      <th>404</th>\n",
       "      <th>405</th>\n",
       "      <th>406</th>\n",
       "      <th>407</th>\n",
       "      <th>408</th>\n",
       "      <th>409</th>\n",
       "      <th>410</th>\n",
       "      <th>411</th>\n",
       "      <th>412</th>\n",
       "      <th>413</th>\n",
       "      <th>414</th>\n",
       "      <th>415</th>\n",
       "      <th>416</th>\n",
       "      <th>417</th>\n",
       "      <th>418</th>\n",
       "      <th>419</th>\n",
       "      <th>420</th>\n",
       "      <th>421</th>\n",
       "      <th>422</th>\n",
       "      <th>423</th>\n",
       "      <th>424</th>\n",
       "      <th>425</th>\n",
       "      <th>426</th>\n",
       "      <th>427</th>\n",
       "      <th>428</th>\n",
       "      <th>429</th>\n",
       "      <th>430</th>\n",
       "      <th>431</th>\n",
       "      <th>432</th>\n",
       "      <th>433</th>\n",
       "      <th>434</th>\n",
       "      <th>435</th>\n",
       "      <th>436</th>\n",
       "      <th>437</th>\n",
       "      <th>438</th>\n",
       "      <th>439</th>\n",
       "      <th>440</th>\n",
       "      <th>441</th>\n",
       "      <th>442</th>\n",
       "      <th>443</th>\n",
       "      <th>444</th>\n",
       "      <th>445</th>\n",
       "      <th>446</th>\n",
       "      <th>447</th>\n",
       "      <th>448</th>\n",
       "      <th>449</th>\n",
       "      <th>450</th>\n",
       "      <th>451</th>\n",
       "      <th>452</th>\n",
       "      <th>453</th>\n",
       "      <th>454</th>\n",
       "      <th>455</th>\n",
       "      <th>456</th>\n",
       "      <th>457</th>\n",
       "      <th>458</th>\n",
       "      <th>459</th>\n",
       "      <th>460</th>\n",
       "      <th>461</th>\n",
       "      <th>462</th>\n",
       "      <th>463</th>\n",
       "      <th>464</th>\n",
       "      <th>465</th>\n",
       "      <th>466</th>\n",
       "      <th>467</th>\n",
       "      <th>468</th>\n",
       "      <th>469</th>\n",
       "      <th>470</th>\n",
       "      <th>471</th>\n",
       "      <th>472</th>\n",
       "      <th>473</th>\n",
       "      <th>474</th>\n",
       "      <th>475</th>\n",
       "      <th>476</th>\n",
       "      <th>477</th>\n",
       "      <th>478</th>\n",
       "      <th>479</th>\n",
       "      <th>480</th>\n",
       "      <th>481</th>\n",
       "      <th>482</th>\n",
       "      <th>483</th>\n",
       "      <th>484</th>\n",
       "      <th>485</th>\n",
       "      <th>486</th>\n",
       "      <th>487</th>\n",
       "      <th>488</th>\n",
       "      <th>489</th>\n",
       "      <th>490</th>\n",
       "      <th>491</th>\n",
       "      <th>492</th>\n",
       "      <th>493</th>\n",
       "      <th>494</th>\n",
       "      <th>495</th>\n",
       "      <th>496</th>\n",
       "      <th>497</th>\n",
       "      <th>498</th>\n",
       "      <th>499</th>\n",
       "      <th>500</th>\n",
       "      <th>501</th>\n",
       "      <th>502</th>\n",
       "      <th>503</th>\n",
       "      <th>504</th>\n",
       "      <th>505</th>\n",
       "      <th>506</th>\n",
       "      <th>507</th>\n",
       "      <th>508</th>\n",
       "      <th>509</th>\n",
       "      <th>510</th>\n",
       "      <th>511</th>\n",
       "      <th>512</th>\n",
       "      <th>513</th>\n",
       "      <th>514</th>\n",
       "      <th>515</th>\n",
       "      <th>516</th>\n",
       "      <th>517</th>\n",
       "      <th>518</th>\n",
       "      <th>519</th>\n",
       "      <th>520</th>\n",
       "      <th>521</th>\n",
       "      <th>522</th>\n",
       "      <th>523</th>\n",
       "      <th>524</th>\n",
       "      <th>525</th>\n",
       "      <th>526</th>\n",
       "      <th>527</th>\n",
       "      <th>528</th>\n",
       "      <th>529</th>\n",
       "      <th>530</th>\n",
       "      <th>531</th>\n",
       "      <th>532</th>\n",
       "      <th>533</th>\n",
       "      <th>534</th>\n",
       "      <th>535</th>\n",
       "      <th>536</th>\n",
       "      <th>537</th>\n",
       "      <th>538</th>\n",
       "      <th>539</th>\n",
       "      <th>540</th>\n",
       "      <th>541</th>\n",
       "      <th>542</th>\n",
       "      <th>543</th>\n",
       "      <th>544</th>\n",
       "      <th>545</th>\n",
       "      <th>546</th>\n",
       "      <th>547</th>\n",
       "      <th>548</th>\n",
       "      <th>549</th>\n",
       "      <th>550</th>\n",
       "      <th>551</th>\n",
       "      <th>552</th>\n",
       "      <th>553</th>\n",
       "      <th>554</th>\n",
       "      <th>555</th>\n",
       "      <th>556</th>\n",
       "      <th>557</th>\n",
       "      <th>558</th>\n",
       "      <th>559</th>\n",
       "      <th>560</th>\n",
       "      <th>561</th>\n",
       "      <th>562</th>\n",
       "      <th>563</th>\n",
       "      <th>564</th>\n",
       "      <th>565</th>\n",
       "      <th>566</th>\n",
       "      <th>567</th>\n",
       "      <th>568</th>\n",
       "      <th>569</th>\n",
       "      <th>570</th>\n",
       "      <th>571</th>\n",
       "      <th>572</th>\n",
       "      <th>573</th>\n",
       "      <th>574</th>\n",
       "      <th>575</th>\n",
       "      <th>576</th>\n",
       "      <th>577</th>\n",
       "      <th>578</th>\n",
       "      <th>579</th>\n",
       "      <th>580</th>\n",
       "      <th>581</th>\n",
       "      <th>582</th>\n",
       "      <th>583</th>\n",
       "      <th>584</th>\n",
       "      <th>585</th>\n",
       "      <th>586</th>\n",
       "      <th>587</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.883919</td>\n",
       "      <td>-0.874013</td>\n",
       "      <td>-2.003464</td>\n",
       "      <td>1.351959</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52f8e0d6-94c6-45d5-903a-27a1d0a01401')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-52f8e0d6-94c6-45d5-903a-27a1d0a01401 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-52f8e0d6-94c6-45d5-903a-27a1d0a01401');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "   0         0         1         2         3    0    1    2    3    4    5    \\\n",
       "0    0 -0.883919 -0.874013 -2.003464  1.351959  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   \\\n",
       "0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   96   97   98   99   100  101  102  103  104  105  106  107  108  109  110  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   111  112  113  114  115  116  117  118  119  120  121  122  123  124  125  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   126  127  128  129  130  131  132  133  134  135  136  137  138  139  140  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   141  142  143  144  145  146  147  148  149  150  151  152  153  154  155  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   156  157  158  159  160  161  162  163  164  165  166  167  168  169  170  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   171  172  173  174  175  176  177  178  179  180  181  182  183  184  185  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   186  187  188  189  190  191  192  193  194  195  196  197  198  199  200  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   201  202  203  204  205  206  207  208  209  210  211  212  213  214  215  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   216  217  218  219  220  221  222  223  224  225  226  227  228  229  230  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   231  232  233  234  235  236  237  238  239  240  241  242  243  244  245  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   246  247  248  249  250  251  252  253  254  255  256  257  258  259  260  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   261  262  263  264  265  266  267  268  269  270  271  272  273  274  275  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   276  277  278  279  280  281  282  283  284  285  286  287  288  289  290  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   291  292  293  294  295  296  297  298  299  300  301  302  303  304  305  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   306  307  308  309  310  311  312  313  314  315  316  317  318  319  320  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   336  337  338  339  340  341  342  343  344  345  346  347  348  349  350  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   351  352  353  354  355  356  357  358  359  360  361  362  363  364  365  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   366  367  368  369  370  371  372  373  374  375  376  377  378  379  380  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   381  382  383  384  385  386  387  388  389  390  391  392  393  394  395  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   396  397  398  399  400  401  402  403  404  405  406  407  408  409  410  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   411  412  413  414  415  416  417  418  419  420  421  422  423  424  425  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   426  427  428  429  430  431  432  433  434  435  436  437  438  439  440  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   441  442  443  444  445  446  447  448  449  450  451  452  453  454  455  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   456  457  458  459  460  461  462  463  464  465  466  467  468  469  470  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   471  472  473  474  475  476  477  478  479  480  481  482  483  484  485  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   486  487  488  489  490  491  492  493  494  495  496  497  498  499  500  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   501  502  503  504  505  506  507  508  509  510  511  512  513  514  515  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   516  517  518  519  520  521  522  523  524  525  526  527  528  529  530  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   531  532  533  534  535  536  537  538  539  540  541  542  543  544  545  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   546  547  548  549  550  551  552  553  554  555  556  557  558  559  560  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  \\\n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "   576  577  578  579  580  581  582  583  584  585  586  587  \n",
       "0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x = pd.concat([x_label,x_num_tr,x_ohe],axis=1)\n",
    "print(train_x.shape)\n",
    "# print(train_x.head())\n",
    "train_x.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "azvT8kaPr8u4",
    "outputId": "630b8e8c-f774-49f5-dbb2-9f5496fab949"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(281, 593)\n"
     ]
    }
   ],
   "source": [
    "test_x = pd.concat([x_label_test,x_num_te,x_ohe_test],axis=1)\n",
    "print(test_x.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2_DJ4lQUsBrB",
    "outputId": "e6c8fd95-522d-4451-9efb-b677d123fc99"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "(654, 1)\n",
      "(281, 1)\n",
      "   CO2_Emissions\n",
      "0      -2.071758\n",
      "1      -0.355784\n",
      "2       0.782853\n",
      "3       0.301739\n",
      "4       0.798890\n",
      "   CO2_Emissions\n",
      "0       0.317776\n",
      "1       0.157404\n",
      "2      -0.868973\n",
      "3      -0.868973\n",
      "4       0.349850\n"
     ]
    }
   ],
   "source": [
    "Y_tra = pd.DataFrame(Y_tr,columns = ['CO2_Emissions'])\n",
    "Y_tes = pd.DataFrame(Y_te,columns = ['CO2_Emissions'])\n",
    "print(type(Y_tra))\n",
    "print(type(Y_tes))\n",
    "print(Y_tra.shape)\n",
    "print(Y_tes.shape)\n",
    "print(Y_tra.head())\n",
    "print(Y_tes.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UVOOOZkOs_bY",
    "outputId": "6b96bb4b-c366-4318-b5e8-c5e901ae6de7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "0      0\n",
      "0      0\n",
      "1      0\n",
      "2      0\n",
      "3      0\n",
      "0      0\n",
      "1      0\n",
      "2      0\n",
      "3      0\n",
      "4      0\n",
      "5      0\n",
      "6      0\n",
      "7      0\n",
      "8      0\n",
      "9      0\n",
      "10     0\n",
      "11     0\n",
      "12     0\n",
      "13     0\n",
      "14     0\n",
      "15     0\n",
      "16     0\n",
      "17     0\n",
      "18     0\n",
      "19     0\n",
      "20     0\n",
      "21     0\n",
      "22     0\n",
      "23     0\n",
      "24     0\n",
      "25     0\n",
      "26     0\n",
      "27     0\n",
      "28     0\n",
      "29     0\n",
      "30     0\n",
      "31     0\n",
      "32     0\n",
      "33     0\n",
      "34     0\n",
      "35     0\n",
      "36     0\n",
      "37     0\n",
      "38     0\n",
      "39     0\n",
      "40     0\n",
      "41     0\n",
      "42     0\n",
      "43     0\n",
      "44     0\n",
      "45     0\n",
      "46     0\n",
      "47     0\n",
      "48     0\n",
      "49     0\n",
      "50     0\n",
      "51     0\n",
      "52     0\n",
      "53     0\n",
      "54     0\n",
      "55     0\n",
      "56     0\n",
      "57     0\n",
      "58     0\n",
      "59     0\n",
      "60     0\n",
      "61     0\n",
      "62     0\n",
      "63     0\n",
      "64     0\n",
      "65     0\n",
      "66     0\n",
      "67     0\n",
      "68     0\n",
      "69     0\n",
      "70     0\n",
      "71     0\n",
      "72     0\n",
      "73     0\n",
      "74     0\n",
      "75     0\n",
      "76     0\n",
      "77     0\n",
      "78     0\n",
      "79     0\n",
      "80     0\n",
      "81     0\n",
      "82     0\n",
      "83     0\n",
      "84     0\n",
      "85     0\n",
      "86     0\n",
      "87     0\n",
      "88     0\n",
      "89     0\n",
      "90     0\n",
      "91     0\n",
      "92     0\n",
      "93     0\n",
      "94     0\n",
      "95     0\n",
      "96     0\n",
      "97     0\n",
      "98     0\n",
      "99     0\n",
      "100    0\n",
      "101    0\n",
      "102    0\n",
      "103    0\n",
      "104    0\n",
      "105    0\n",
      "106    0\n",
      "107    0\n",
      "108    0\n",
      "109    0\n",
      "110    0\n",
      "111    0\n",
      "112    0\n",
      "113    0\n",
      "114    0\n",
      "115    0\n",
      "116    0\n",
      "117    0\n",
      "118    0\n",
      "119    0\n",
      "120    0\n",
      "121    0\n",
      "122    0\n",
      "123    0\n",
      "124    0\n",
      "125    0\n",
      "126    0\n",
      "127    0\n",
      "128    0\n",
      "129    0\n",
      "130    0\n",
      "131    0\n",
      "132    0\n",
      "133    0\n",
      "134    0\n",
      "135    0\n",
      "136    0\n",
      "137    0\n",
      "138    0\n",
      "139    0\n",
      "140    0\n",
      "141    0\n",
      "142    0\n",
      "143    0\n",
      "144    0\n",
      "145    0\n",
      "146    0\n",
      "147    0\n",
      "148    0\n",
      "149    0\n",
      "150    0\n",
      "151    0\n",
      "152    0\n",
      "153    0\n",
      "154    0\n",
      "155    0\n",
      "156    0\n",
      "157    0\n",
      "158    0\n",
      "159    0\n",
      "160    0\n",
      "161    0\n",
      "162    0\n",
      "163    0\n",
      "164    0\n",
      "165    0\n",
      "166    0\n",
      "167    0\n",
      "168    0\n",
      "169    0\n",
      "170    0\n",
      "171    0\n",
      "172    0\n",
      "173    0\n",
      "174    0\n",
      "175    0\n",
      "176    0\n",
      "177    0\n",
      "178    0\n",
      "179    0\n",
      "180    0\n",
      "181    0\n",
      "182    0\n",
      "183    0\n",
      "184    0\n",
      "185    0\n",
      "186    0\n",
      "187    0\n",
      "188    0\n",
      "189    0\n",
      "190    0\n",
      "191    0\n",
      "192    0\n",
      "193    0\n",
      "194    0\n",
      "195    0\n",
      "196    0\n",
      "197    0\n",
      "198    0\n",
      "199    0\n",
      "200    0\n",
      "201    0\n",
      "202    0\n",
      "203    0\n",
      "204    0\n",
      "205    0\n",
      "206    0\n",
      "207    0\n",
      "208    0\n",
      "209    0\n",
      "210    0\n",
      "211    0\n",
      "212    0\n",
      "213    0\n",
      "214    0\n",
      "215    0\n",
      "216    0\n",
      "217    0\n",
      "218    0\n",
      "219    0\n",
      "220    0\n",
      "221    0\n",
      "222    0\n",
      "223    0\n",
      "224    0\n",
      "225    0\n",
      "226    0\n",
      "227    0\n",
      "228    0\n",
      "229    0\n",
      "230    0\n",
      "231    0\n",
      "232    0\n",
      "233    0\n",
      "234    0\n",
      "235    0\n",
      "236    0\n",
      "237    0\n",
      "238    0\n",
      "239    0\n",
      "240    0\n",
      "241    0\n",
      "242    0\n",
      "243    0\n",
      "244    0\n",
      "245    0\n",
      "246    0\n",
      "247    0\n",
      "248    0\n",
      "249    0\n",
      "250    0\n",
      "251    0\n",
      "252    0\n",
      "253    0\n",
      "254    0\n",
      "255    0\n",
      "256    0\n",
      "257    0\n",
      "258    0\n",
      "259    0\n",
      "260    0\n",
      "261    0\n",
      "262    0\n",
      "263    0\n",
      "264    0\n",
      "265    0\n",
      "266    0\n",
      "267    0\n",
      "268    0\n",
      "269    0\n",
      "270    0\n",
      "271    0\n",
      "272    0\n",
      "273    0\n",
      "274    0\n",
      "275    0\n",
      "276    0\n",
      "277    0\n",
      "278    0\n",
      "279    0\n",
      "280    0\n",
      "281    0\n",
      "282    0\n",
      "283    0\n",
      "284    0\n",
      "285    0\n",
      "286    0\n",
      "287    0\n",
      "288    0\n",
      "289    0\n",
      "290    0\n",
      "291    0\n",
      "292    0\n",
      "293    0\n",
      "294    0\n",
      "295    0\n",
      "296    0\n",
      "297    0\n",
      "298    0\n",
      "299    0\n",
      "300    0\n",
      "301    0\n",
      "302    0\n",
      "303    0\n",
      "304    0\n",
      "305    0\n",
      "306    0\n",
      "307    0\n",
      "308    0\n",
      "309    0\n",
      "310    0\n",
      "311    0\n",
      "312    0\n",
      "313    0\n",
      "314    0\n",
      "315    0\n",
      "316    0\n",
      "317    0\n",
      "318    0\n",
      "319    0\n",
      "320    0\n",
      "321    0\n",
      "322    0\n",
      "323    0\n",
      "324    0\n",
      "325    0\n",
      "326    0\n",
      "327    0\n",
      "328    0\n",
      "329    0\n",
      "330    0\n",
      "331    0\n",
      "332    0\n",
      "333    0\n",
      "334    0\n",
      "335    0\n",
      "336    0\n",
      "337    0\n",
      "338    0\n",
      "339    0\n",
      "340    0\n",
      "341    0\n",
      "342    0\n",
      "343    0\n",
      "344    0\n",
      "345    0\n",
      "346    0\n",
      "347    0\n",
      "348    0\n",
      "349    0\n",
      "350    0\n",
      "351    0\n",
      "352    0\n",
      "353    0\n",
      "354    0\n",
      "355    0\n",
      "356    0\n",
      "357    0\n",
      "358    0\n",
      "359    0\n",
      "360    0\n",
      "361    0\n",
      "362    0\n",
      "363    0\n",
      "364    0\n",
      "365    0\n",
      "366    0\n",
      "367    0\n",
      "368    0\n",
      "369    0\n",
      "370    0\n",
      "371    0\n",
      "372    0\n",
      "373    0\n",
      "374    0\n",
      "375    0\n",
      "376    0\n",
      "377    0\n",
      "378    0\n",
      "379    0\n",
      "380    0\n",
      "381    0\n",
      "382    0\n",
      "383    0\n",
      "384    0\n",
      "385    0\n",
      "386    0\n",
      "387    0\n",
      "388    0\n",
      "389    0\n",
      "390    0\n",
      "391    0\n",
      "392    0\n",
      "393    0\n",
      "394    0\n",
      "395    0\n",
      "396    0\n",
      "397    0\n",
      "398    0\n",
      "399    0\n",
      "400    0\n",
      "401    0\n",
      "402    0\n",
      "403    0\n",
      "404    0\n",
      "405    0\n",
      "406    0\n",
      "407    0\n",
      "408    0\n",
      "409    0\n",
      "410    0\n",
      "411    0\n",
      "412    0\n",
      "413    0\n",
      "414    0\n",
      "415    0\n",
      "416    0\n",
      "417    0\n",
      "418    0\n",
      "419    0\n",
      "420    0\n",
      "421    0\n",
      "422    0\n",
      "423    0\n",
      "424    0\n",
      "425    0\n",
      "426    0\n",
      "427    0\n",
      "428    0\n",
      "429    0\n",
      "430    0\n",
      "431    0\n",
      "432    0\n",
      "433    0\n",
      "434    0\n",
      "435    0\n",
      "436    0\n",
      "437    0\n",
      "438    0\n",
      "439    0\n",
      "440    0\n",
      "441    0\n",
      "442    0\n",
      "443    0\n",
      "444    0\n",
      "445    0\n",
      "446    0\n",
      "447    0\n",
      "448    0\n",
      "449    0\n",
      "450    0\n",
      "451    0\n",
      "452    0\n",
      "453    0\n",
      "454    0\n",
      "455    0\n",
      "456    0\n",
      "457    0\n",
      "458    0\n",
      "459    0\n",
      "460    0\n",
      "461    0\n",
      "462    0\n",
      "463    0\n",
      "464    0\n",
      "465    0\n",
      "466    0\n",
      "467    0\n",
      "468    0\n",
      "469    0\n",
      "470    0\n",
      "471    0\n",
      "472    0\n",
      "473    0\n",
      "474    0\n",
      "475    0\n",
      "476    0\n",
      "477    0\n",
      "478    0\n",
      "479    0\n",
      "480    0\n",
      "481    0\n",
      "482    0\n",
      "483    0\n",
      "484    0\n",
      "485    0\n",
      "486    0\n",
      "487    0\n",
      "488    0\n",
      "489    0\n",
      "490    0\n",
      "491    0\n",
      "492    0\n",
      "493    0\n",
      "494    0\n",
      "495    0\n",
      "496    0\n",
      "497    0\n",
      "498    0\n",
      "499    0\n",
      "500    0\n",
      "501    0\n",
      "502    0\n",
      "503    0\n",
      "504    0\n",
      "505    0\n",
      "506    0\n",
      "507    0\n",
      "508    0\n",
      "509    0\n",
      "510    0\n",
      "511    0\n",
      "512    0\n",
      "513    0\n",
      "514    0\n",
      "515    0\n",
      "516    0\n",
      "517    0\n",
      "518    0\n",
      "519    0\n",
      "520    0\n",
      "521    0\n",
      "522    0\n",
      "523    0\n",
      "524    0\n",
      "525    0\n",
      "526    0\n",
      "527    0\n",
      "528    0\n",
      "529    0\n",
      "530    0\n",
      "531    0\n",
      "532    0\n",
      "533    0\n",
      "534    0\n",
      "535    0\n",
      "536    0\n",
      "537    0\n",
      "538    0\n",
      "539    0\n",
      "540    0\n",
      "541    0\n",
      "542    0\n",
      "543    0\n",
      "544    0\n",
      "545    0\n",
      "546    0\n",
      "547    0\n",
      "548    0\n",
      "549    0\n",
      "550    0\n",
      "551    0\n",
      "552    0\n",
      "553    0\n",
      "554    0\n",
      "555    0\n",
      "556    0\n",
      "557    0\n",
      "558    0\n",
      "559    0\n",
      "560    0\n",
      "561    0\n",
      "562    0\n",
      "563    0\n",
      "564    0\n",
      "565    0\n",
      "566    0\n",
      "567    0\n",
      "568    0\n",
      "569    0\n",
      "570    0\n",
      "571    0\n",
      "572    0\n",
      "573    0\n",
      "574    0\n",
      "575    0\n",
      "576    0\n",
      "577    0\n",
      "578    0\n",
      "579    0\n",
      "580    0\n",
      "581    0\n",
      "582    0\n",
      "583    0\n",
      "584    0\n",
      "585    0\n",
      "586    0\n",
      "587    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(type(test_x))\n",
    "print((test_x.isnull().sum()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5L--loV9XXGX",
    "outputId": "8232bb9f-3f08-4d07-ebad-79099270ce92"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'> <class 'pandas.core.frame.DataFrame'>\n",
      "<class 'pandas.core.frame.DataFrame'> <class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "train_x=train_x.reset_index(drop=True)\n",
    "test_x = test_x.reset_index(drop=True)\n",
    "print(type(train_x),type(test_x))\n",
    "Y_tra=Y_tra.reset_index(drop=True)\n",
    "Y_tes=Y_tes.reset_index(drop=True)\n",
    "print(type(train_x),type(test_x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "id": "B0J7irBwJy-P"
   },
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "linreg_ols = sm.OLS(Y_tra, train_x).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "id": "jRIH3QS7mpCd"
   },
   "outputs": [],
   "source": [
    "\n",
    "y_pred_ols = linreg_ols.predict(test_x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "CpdG5QUJKnpU",
    "outputId": "e36b19de-f3fe-4aa5-d70a-2dbc23757741"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "False\n",
      "[ 1.78151966e-01  1.58616223e+00 -1.02467939e+00 -9.62637777e-01\n",
      "  4.53624414e-01  4.78499323e-01  2.32182688e-01  4.70461921e-01\n",
      " -2.30949430e+00  1.64454816e-01  9.14843350e-01  5.51169417e-01\n",
      " -1.63915238e+00  1.86919756e+00  2.21662847e+00 -1.92540472e+00\n",
      " -1.57980571e+00 -1.27502870e+00 -5.89687794e-01  3.98222488e+00\n",
      "  3.27297240e-01  1.40166678e-01  2.28789531e-01 -2.77010572e-01\n",
      "  9.26059960e-01  1.15398695e+00 -1.62308913e+00  9.21679635e-01\n",
      "  1.17017177e+00  3.21498577e+00 -4.72513210e-01  2.34735607e-01\n",
      "  5.16426131e-01  4.59503227e-01 -4.16400116e-01  8.45557857e-01\n",
      "  2.02888832e-01  1.69767170e-01 -9.67274069e-01 -1.62138289e+00\n",
      " -2.27723387e+00 -8.95379458e-01  4.31324007e-01 -4.67299541e-01\n",
      "  1.58638513e+00 -1.33331048e-02 -1.00970693e-01 -1.88166991e-01\n",
      "  1.62433839e+00  1.36648710e+00  1.19452074e+00 -1.43669370e+00\n",
      " -3.24722735e+00 -6.91143752e-01  4.56644136e-01  3.29203067e+00\n",
      "  1.03139729e+00 -1.21941413e+00 -1.62869126e+00 -3.70713320e-01\n",
      "  1.08643943e+00 -1.36203940e-01 -3.79267161e-01  2.22318918e+00\n",
      " -4.78916985e-01 -5.21212528e-01  1.46315141e+00 -1.94518410e-01\n",
      " -5.85366873e-01 -4.13777001e-01 -6.08061253e-01  6.99863182e-01\n",
      " -3.72684034e-01  7.23744901e-01 -2.33099368e+00  1.09446454e+00\n",
      "  9.85160652e-01 -6.15008427e-01  2.38211423e+00 -1.27690795e-01\n",
      " -1.74062588e+00  1.18397339e+00  6.74054833e-01  2.11764614e+00\n",
      "  1.03923862e+00  4.18747936e-02  1.25158153e+00 -1.67615805e+00\n",
      " -6.33663488e-02 -1.88317477e+00  1.12421656e+00 -5.89672651e-01\n",
      "  1.32917489e-01 -1.20708421e-01  8.44882632e-01 -4.59019142e-01\n",
      "  6.97621646e-01 -1.67615805e+00  1.05868677e+00 -1.39242817e+00\n",
      "  2.56400409e+00  3.35023764e-02 -2.28252248e+00 -6.80435072e-01\n",
      " -1.55835497e-01 -6.38576244e-01 -3.28119566e-01  1.00075497e+00\n",
      "  5.48054361e-01  7.45816593e-01  1.83026135e+00  5.59561186e-01\n",
      "  4.20940714e-01  7.18940553e-01  1.91691345e+00 -1.59219247e+00\n",
      "  4.42646693e-01  2.65405185e+00 -9.96365606e-01 -1.00846883e+00\n",
      "  9.49790844e-01  2.51584209e-01 -1.98976300e-01  8.05442016e-01\n",
      " -4.56571571e-01 -1.44688493e+00  2.18416816e+00 -1.15889484e+00\n",
      "  1.60316279e+00 -1.02258757e+00  4.61669638e-01 -1.46284266e+00\n",
      " -2.69524281e-02  8.78342531e-01 -8.95291310e-01  3.21498577e+00\n",
      "  6.46760452e-01  3.21498577e+00 -1.00733389e+00  9.33162358e-01\n",
      "  5.12587890e-01 -5.93454664e-01  1.27233108e+00 -1.41562824e+00\n",
      " -1.40236852e-01 -1.39733013e+00 -2.05069885e-02  1.00075497e+00\n",
      "  1.17017177e+00 -1.15021833e+00  1.62177853e+00  1.45551096e+00\n",
      "  3.99224546e-01 -1.24514710e+00 -3.38057575e+00 -4.66494530e-01\n",
      "  3.96932070e+00 -2.09209021e+00 -2.15155923e+00  4.40146966e-01\n",
      "  1.70163259e-01  1.71154928e+00 -4.91218150e-02  1.54207428e+00\n",
      " -1.93830889e+00  2.11159610e+00 -2.43897914e+00 -3.68611975e-02\n",
      "  2.41667485e+00 -1.58249824e+00 -2.13199861e+00  2.22833290e+00\n",
      "  1.64292414e+00 -4.98321559e-01  1.28761365e+00 -4.05601742e-01\n",
      "  5.58769928e-01 -2.39783689e-01 -3.43360790e-01  5.79149717e-01\n",
      "  3.44057599e-01 -2.64654575e+00  1.24652273e+00  6.95576578e-01\n",
      " -2.03265734e+00  8.80750982e-01 -5.83112100e-01  2.32296352e+00\n",
      " -1.15861194e+00 -1.74844477e+00 -2.28448911e+00 -1.44533893e+00\n",
      " -2.09116956e+00  8.72253118e-01  2.80448750e+00  2.60324137e+00\n",
      " -5.11719524e-01  3.92619706e+00  3.51855917e-01 -1.35659919e+00\n",
      "  1.49318536e+00  1.95516662e-01 -1.93012108e+00 -1.10565855e+00\n",
      " -4.40204462e-01  1.94104220e+00 -1.95002078e+00 -1.56026329e+00\n",
      " -3.84139679e-01  9.57878967e-01 -1.44681201e+00 -2.49886129e-01\n",
      " -2.02817950e-01  1.33563830e+00 -2.20280054e+00  8.67549745e-01\n",
      "  4.31324007e-01  3.16059823e-01  9.20258183e-01 -3.72995019e-01\n",
      "  3.16072446e+00  1.84426089e+00  1.54514185e+00 -2.25138711e-01\n",
      "  2.82715460e+00 -5.79500107e-01 -6.53025799e-01 -1.62755551e+00\n",
      " -5.14322401e-01  8.42000130e-01  2.03609938e-01  1.17822194e+00\n",
      "  3.57431453e-01  4.10537913e-02 -1.18690663e+00 -1.81410311e+00\n",
      "  3.37605512e-01 -2.49055468e+00 -3.95420313e-01 -4.01872400e-01\n",
      "  9.92133964e-02  3.96932070e+00  3.45836369e-01 -1.05996705e-01\n",
      " -1.12589104e+00 -1.00390802e+00  5.01808747e-01  1.94697580e-01\n",
      " -1.68178418e+00 -4.75007870e-01 -1.89148700e+00  2.90586019e-02\n",
      "  4.29505503e-01 -2.26879514e-01  1.91691345e+00  2.72783262e-01\n",
      " -3.75071629e-02  4.10537913e-02  2.46576586e-01  1.20536075e-03\n",
      "  7.20285818e-01  3.55106891e-02  9.41910966e-01 -7.16014630e-01\n",
      " -2.02114480e+00  1.23832254e+00 -2.65442768e+00 -1.16045000e+00\n",
      "  1.08095650e-02 -4.50119484e-01 -2.59823616e+00  7.73181579e-01\n",
      " -1.35473961e+00 -9.75397409e-02 -1.56321998e+00  1.96027709e-02\n",
      "  4.29661057e-01  1.07485690e+00 -1.97940770e+00 -4.72464898e-01\n",
      " -1.88068440e+00]\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "(1, 281)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "(281, 1)\n"
     ]
    }
   ],
   "source": [
    "print(y_pred_ols.isnull().sum())\n",
    "y_pred_nump = y_pred_ols.to_numpy()\n",
    "print(np.any(np.isnan(y_pred_nump)))\n",
    "y_pred_nump = np.nan_to_num(y_pred_nump)\n",
    "print(y_pred_nump)\n",
    "y_pred_ols__ = pd.DataFrame([y_pred_ols])\n",
    "print(type(y_pred_ols__))\n",
    "print(y_pred_ols__.shape)\n",
    "y_pred_ols_ =y_pred_ols__.T\n",
    "print(type(y_pred_ols_))\n",
    "print(y_pred_ols_.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4EhdouA9NR4W",
    "outputId": "4cd8f505-2c6e-4b92-9cd2-eb7d2d3ca621"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.7164332271558307\n",
      "Mean Squared Error (MSE): 0.9519683935856634\n",
      "Root Mean Squared Error (RMSE): 0.9756886765693571\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "# Calculate MAE\n",
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_ols_)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_ols_)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes, y_pred_ols_))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 81
    },
    "id": "BQptEN-HQ8HP",
    "outputId": "3933f1ce-4a8d-42dd-87cf-a4cbca512041"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-6a039085-3e58-4a39-bc46-8cc70401130c\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>OLS</td>\n",
       "      <td>0.716433</td>\n",
       "      <td>0.951968</td>\n",
       "      <td>0.975689</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a039085-3e58-4a39-bc46-8cc70401130c')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-6a039085-3e58-4a39-bc46-8cc70401130c button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-6a039085-3e58-4a39-bc46-8cc70401130c');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "  Model       MAE       MSE      RMSE\n",
       "0   OLS  0.716433  0.951968  0.975689"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = ['Model', 'MAE', 'MSE', 'RMSE']\n",
    "\n",
    "result_tabulation_ols = pd.DataFrame(columns = cols)\n",
    "\n",
    "rf_reg_metrics = pd.Series({'Model': \"OLS\",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_ols = result_tabulation_ols.append(rf_reg_metrics, ignore_index = True)\n",
    "\n",
    "result_tabulation_ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "id": "g2umCYdXsy5x"
   },
   "outputs": [],
   "source": [
    "# y_pred_nump = y_pred_ols.to_numpy()\n",
    "# print(np.any(np.isnan(y_pred_nump)))\n",
    "# y_pred_nump = np.nan_to_num(y_pred_nump)\n",
    "# print(y_pred_nump)\n",
    "# y_pred_ols__ = pd.DataFrame([y_pred_nump])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_XdKWs6j714I"
   },
   "source": [
    "Ensemble Technic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rpqgoa9P4Mww",
    "outputId": "fd672863-424a-4c21-e707-75c397df56ab"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/ensemble/_bagging.py:429: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "# predict the values\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn import tree\n",
    "\n",
    "# build the model\n",
    "meta_estimator = BaggingRegressor(tree.DecisionTreeRegressor(random_state=1)) #Similar to a random forest, just that the DT's are having all the features to split on\n",
    "\n",
    "# fit the model\n",
    "meta_estimator.fit(train_x, Y_tra) \n",
    "y_pred_estimator = meta_estimator.predict(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HwKYhiGk5HPi",
    "outputId": "97acce59-e028-4490-ce26-f70762a4d5a8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.08713702832097889\n",
      "Mean Squared Error (MSE): 0.0800656535634092\n",
      "Root Mean Squared Error (RMSE): 0.2829587488723563\n"
     ]
    }
   ],
   "source": [
    "# Calculate MAE\n",
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_estimator)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_estimator)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes,y_pred_estimator))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 81
    },
    "id": "pE6CKVxF5Ncy",
    "outputId": "e0966f52-58a3-43e3-8de2-59e12cdc5829"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-2a0193e1-5385-41de-a5fe-4bd614c2d780\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.087137</td>\n",
       "      <td>0.080066</td>\n",
       "      <td>0.282959</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a0193e1-5385-41de-a5fe-4bd614c2d780')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-2a0193e1-5385-41de-a5fe-4bd614c2d780 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-2a0193e1-5385-41de-a5fe-4bd614c2d780');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "      Model       MAE       MSE      RMSE\n",
       "0  Bagging   0.087137  0.080066  0.282959"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = ['Model', 'MAE', 'MSE', 'RMSE']\n",
    "\n",
    "result_tabulation_1 = pd.DataFrame(columns = cols)\n",
    "\n",
    "rf_reg_metrics = pd.Series({'Model': \"Bagging \",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_1 = result_tabulation_1.append(rf_reg_metrics, ignore_index = True)\n",
    "\n",
    "result_tabulation_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GCabF1yQ5koP",
    "outputId": "ee7ee921-d107-4d09-b144-0fd1fb9c21fb"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor(random_state=10)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "\n",
    "# build the model\n",
    "adaboost = AdaBoostRegressor(random_state=10)\n",
    "# fit the model\n",
    "adaboost.fit(train_x, Y_tra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "id": "Nhv7_K485pCP"
   },
   "outputs": [],
   "source": [
    "# predict the values\n",
    "y_pred_adaboost  = adaboost.predict(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zlqTrTVc-P0x",
    "outputId": "209ba330-9645-467c-8a04-3076b9b81bb1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.18005365436780554\n",
      "Mean Squared Error (MSE): 0.09702401800950186\n",
      "Root Mean Squared Error (RMSE): 0.31148678625184384\n"
     ]
    }
   ],
   "source": [
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_adaboost)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_adaboost)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes, y_pred_adaboost))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 112
    },
    "id": "gJnBSCI-5s3v",
    "outputId": "6836f233-c766-4d7b-b3f2-16043e16b061"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-7dc68a21-d37d-46eb-8438-4fd2178268fa\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.087137</td>\n",
       "      <td>0.080066</td>\n",
       "      <td>0.282959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>0.180054</td>\n",
       "      <td>0.097024</td>\n",
       "      <td>0.311487</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7dc68a21-d37d-46eb-8438-4fd2178268fa')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-7dc68a21-d37d-46eb-8438-4fd2178268fa button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-7dc68a21-d37d-46eb-8438-4fd2178268fa');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "       Model       MAE       MSE      RMSE\n",
       "0   Bagging   0.087137  0.080066  0.282959\n",
       "1  AdaBoost   0.180054  0.097024  0.311487"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_reg_metrics = pd.Series({'Model': \"AdaBoost \",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_1 = result_tabulation_1.append(rf_reg_metrics, ignore_index = True)\n",
    "\n",
    "result_tabulation_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vnQp2x5t529v",
    "outputId": "71639e65-6fa1-403e-d6d8-88e287177fc8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16:50:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "XGBRegressor(learning_rate=0.01, random_state=1)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost.sklearn import XGBRegressor \n",
    "xgbm = XGBRegressor(random_state=1,learning_rate=0.01)\n",
    "train_X = train_x.values\n",
    "test_X = test_x.values\n",
    "xgbm.fit(train_X, Y_tra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "ObYX8d3b57Fn"
   },
   "outputs": [],
   "source": [
    "# predict the values\n",
    "y_pred_xgbm  = xgbm.predict(test_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "i_-T_M3L-Mq5",
    "outputId": "0b5238cd-2697-4bc1-8ad2-6748a67e81fc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.42171345080153033\n",
      "Mean Squared Error (MSE): 0.28869506851819005\n",
      "Root Mean Squared Error (RMSE): 0.5373035161974934\n"
     ]
    }
   ],
   "source": [
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_xgbm)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_xgbm)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes, y_pred_xgbm))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 143
    },
    "id": "bY2EjQFj6Kr2",
    "outputId": "2f1bc3f2-f25e-4227-a642-3192e25364cc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-5760fa8e-ed00-46a1-a929-14545844a4e5\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.087137</td>\n",
       "      <td>0.080066</td>\n",
       "      <td>0.282959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>0.180054</td>\n",
       "      <td>0.097024</td>\n",
       "      <td>0.311487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>xgboost</td>\n",
       "      <td>0.421713</td>\n",
       "      <td>0.288695</td>\n",
       "      <td>0.537304</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5760fa8e-ed00-46a1-a929-14545844a4e5')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-5760fa8e-ed00-46a1-a929-14545844a4e5 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-5760fa8e-ed00-46a1-a929-14545844a4e5');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "       Model       MAE       MSE      RMSE\n",
       "0   Bagging   0.087137  0.080066  0.282959\n",
       "1  AdaBoost   0.180054  0.097024  0.311487\n",
       "2   xgboost   0.421713  0.288695  0.537304"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_reg_metrics = pd.Series({'Model': \"xgboost \",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_1 = result_tabulation_1.append(rf_reg_metrics, ignore_index = True)\n",
    "\n",
    "result_tabulation_1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "npF0Fn6SEq1Z"
   },
   "source": [
    "Feature Selection Using Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "Ji7n6ta56Hmg"
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.feature_selection import SelectFromModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "G9Baki-Veh6L",
    "outputId": "42a975b6-e6ef-4001-bea1-0099a6e7fa9f"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/feature_selection/_from_model.py:267: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  self.estimator_.fit(X, y, **fit_params)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SelectFromModel(estimator=RandomForestRegressor())"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sel = SelectFromModel(RandomForestRegressor(n_estimators = 100))\n",
    "sel.fit(train_x,Y_tra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DtnHRjh2h9RC",
    "outputId": "a6d770fe-be0c-439a-bddd-03142cf39dbb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_feat= train_x.columns[(sel.get_support())]\n",
    "len(selected_feat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "o-s9gF7kiJ4P",
    "outputId": "40b5a63f-fca8-4319-a8a4-0f3d088cbb67"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Int64Index([0, 1, 2, 6, 567], dtype='int64')\n"
     ]
    }
   ],
   "source": [
    "print(selected_feat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gWzImPdVjyr_",
    "outputId": "4fe45b0c-150e-4ee7-fd0c-6274a52a2282"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Int64Index([0, 0, 0, 1, 1, 2, 2, 6, 567], dtype='int64')\n",
      "(654, 9)\n",
      "(281, 9)\n"
     ]
    }
   ],
   "source": [
    "X_train_1 = train_x[selected_feat]\n",
    "X_test_1 =  test_x[selected_feat]\n",
    "print(X_train_1.columns)\n",
    "print(X_train_1.shape)\n",
    "print(X_test_1.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bPjm4FIcjOVw",
    "outputId": "24a23a88-cf7c-47d1-9903-6ece0c9d8be8"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/ensemble/_bagging.py:429: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "BaggingRegressor(base_estimator=DecisionTreeRegressor(random_state=1))"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meta_estimator = BaggingRegressor(tree.DecisionTreeRegressor(random_state=1))\n",
    "meta_estimator.fit(X_train_1, Y_tra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "id": "kDdU5J2R8Ij7"
   },
   "outputs": [],
   "source": [
    "y_pred_bag = meta_estimator.predict(X_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4fnZaPoM8Qt8",
    "outputId": "91f91af1-a36c-490c-aba9-3bfd75e3f625"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.08236828249731964\n",
      "Mean Squared Error (MSE): 0.07772034811152567\n",
      "Root Mean Squared Error (RMSE): 0.2787836941277694\n"
     ]
    }
   ],
   "source": [
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_bag)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_bag)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes, y_pred_bag))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 81
    },
    "id": "Quh4zIfQ8Qq8",
    "outputId": "4f04e619-151d-438a-f107-2cfcdf8673a9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-a0cbf0df-145b-4789-bfdb-465be339fccd\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.082368</td>\n",
       "      <td>0.07772</td>\n",
       "      <td>0.278784</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0cbf0df-145b-4789-bfdb-465be339fccd')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-a0cbf0df-145b-4789-bfdb-465be339fccd button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-a0cbf0df-145b-4789-bfdb-465be339fccd');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "     Model       MAE      MSE      RMSE\n",
       "0  Bagging  0.082368  0.07772  0.278784"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = ['Model', 'MAE', 'MSE', 'RMSE']\n",
    "result_tabulation_2 = pd.DataFrame(columns = cols)\n",
    "rf_reg_metrics = pd.Series({'Model': \"Bagging\",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_2 = result_tabulation_2.append(rf_reg_metrics, ignore_index = True)\n",
    "result_tabulation_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JSzHJwML8QmF",
    "outputId": "1975becf-f283-4754-c641-706b8782697f"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "AdaBoostRegressor(random_state=10)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# build the model\n",
    "adaboost = AdaBoostRegressor(random_state=10)\n",
    "# fit the model\n",
    "adaboost.fit(X_train_1, Y_tra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "id": "2LirlpHW8QjT"
   },
   "outputs": [],
   "source": [
    "y_pred_adaboost  = adaboost.predict(X_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "r3TdpqPc-ogd",
    "outputId": "31978a8c-507c-4faa-b7ce-f866c0dd3ba4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.1853602251742024\n",
      "Mean Squared Error (MSE): 0.08418192945758676\n",
      "Root Mean Squared Error (RMSE): 0.2901412232992526\n"
     ]
    }
   ],
   "source": [
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_adaboost)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_adaboost)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes, y_pred_adaboost))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 112
    },
    "id": "Vhdac79v8Qg0",
    "outputId": "7a3bdf8d-0a79-49b3-e136-2c1e2bd93b1a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-14306d83-bc09-4fce-8ab9-5ebdb6596255\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.082368</td>\n",
       "      <td>0.077720</td>\n",
       "      <td>0.278784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>0.185360</td>\n",
       "      <td>0.084182</td>\n",
       "      <td>0.290141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14306d83-bc09-4fce-8ab9-5ebdb6596255')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-14306d83-bc09-4fce-8ab9-5ebdb6596255 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-14306d83-bc09-4fce-8ab9-5ebdb6596255');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "       Model       MAE       MSE      RMSE\n",
       "0    Bagging  0.082368  0.077720  0.278784\n",
       "1  AdaBoost   0.185360  0.084182  0.290141"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_reg_metrics = pd.Series({'Model': \"AdaBoost \",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_2 = result_tabulation_2.append(rf_reg_metrics, ignore_index = True)\n",
    "result_tabulation_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "z6MOBOPv8cSa",
    "outputId": "8da97bae-7e79-4458-f759-98bec884f0a5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16:50:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "XGBRegressor(learning_rate=0.01, random_state=1)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# build the model\n",
    "xgbm = XGBRegressor(random_state=1,learning_rate=0.01)\n",
    "# fit the model\n",
    "x_train = X_train_1.values\n",
    "x_test = X_test_1.values\n",
    "xgbm.fit(x_train, Y_tra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "id": "UhU8ZfKc8cPd"
   },
   "outputs": [],
   "source": [
    "y_pred_xgbm  = xgbm.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Dzk2ojmg8cMk",
    "outputId": "ace25085-1121-4b70-c705-b2857b204e31"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.42171345080153033\n",
      "Mean Squared Error (MSE): 0.28869506851819005\n",
      "Root Mean Squared Error (RMSE): 0.5373035161974934\n"
     ]
    }
   ],
   "source": [
    "rf_reg_MAE = metrics.mean_absolute_error(Y_tes, y_pred_xgbm)\n",
    "print('Mean Absolute Error (MAE):', rf_reg_MAE)\n",
    "\n",
    "# Calculate MSE\n",
    "rf_reg_MSE = metrics.mean_squared_error(Y_tes, y_pred_xgbm)\n",
    "print('Mean Squared Error (MSE):', rf_reg_MSE)\n",
    "\n",
    "# Calculate RMSE\n",
    "rf_reg_RMSE = np.sqrt(metrics.mean_squared_error(Y_tes, y_pred_xgbm))\n",
    "print('Root Mean Squared Error (RMSE):', rf_reg_RMSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 143
    },
    "id": "SKk-bz1H8cKB",
    "outputId": "5e1200f9-4f74-464f-d963-9eb3e2ea06e5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-033091a1-52ac-4d78-8bc7-8ab342a2088c\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bagging</td>\n",
       "      <td>0.082368</td>\n",
       "      <td>0.077720</td>\n",
       "      <td>0.278784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AdaBoost</td>\n",
       "      <td>0.185360</td>\n",
       "      <td>0.084182</td>\n",
       "      <td>0.290141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>XGBoosting</td>\n",
       "      <td>0.421713</td>\n",
       "      <td>0.288695</td>\n",
       "      <td>0.537304</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-033091a1-52ac-4d78-8bc7-8ab342a2088c')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-033091a1-52ac-4d78-8bc7-8ab342a2088c button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-033091a1-52ac-4d78-8bc7-8ab342a2088c');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "        Model       MAE       MSE      RMSE\n",
       "0     Bagging  0.082368  0.077720  0.278784\n",
       "1   AdaBoost   0.185360  0.084182  0.290141\n",
       "2  XGBoosting  0.421713  0.288695  0.537304"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_reg_metrics = pd.Series({'Model': \"XGBoosting\",\n",
    "                     'MAE':rf_reg_MAE,\n",
    "                     'MSE': rf_reg_MSE,\n",
    "                     'RMSE': rf_reg_RMSE     \n",
    "                   })\n",
    "result_tabulation_2 = result_tabulation_2.append(rf_reg_metrics, ignore_index = True)\n",
    "result_tabulation_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "c4-C9mcVmxEu",
    "outputId": "9b5df029-2e42-48bd-92f2-e23303e87fe8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OLS\n",
      "  Model       MAE       MSE      RMSE\n",
      "0   OLS  0.716433  0.951968  0.975689 \n",
      "\n",
      "Ensemble Technics Without Feature Selection\n",
      "       Model       MAE       MSE      RMSE\n",
      "0   Bagging   0.087137  0.080066  0.282959\n",
      "1  AdaBoost   0.180054  0.097024  0.311487\n",
      "2   xgboost   0.421713  0.288695  0.537304 \n",
      "\n",
      "Ensemble Technics After Random Forest Feature Selection\n",
      "        Model       MAE       MSE      RMSE\n",
      "0     Bagging  0.082368  0.077720  0.278784\n",
      "1   AdaBoost   0.185360  0.084182  0.290141\n",
      "2  XGBoosting  0.421713  0.288695  0.537304 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('OLS')\n",
    "print(result_tabulation_ols,'\\n')\n",
    "print('Ensemble Technics Without Feature Selection')\n",
    "print(result_tabulation_1,'\\n')\n",
    "print('Ensemble Technics After Random Forest Feature Selection')\n",
    "print(result_tabulation_2,'\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "A5FelxfjST42"
   },
   "source": [
    "In the above model performance Ensembel techinques with and without Feature selection perform almost similar and better than OLS model."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
